a
lapply(1:3, function(i) a) %>% bind_rows()
lapply(1:3, function(i) a) %>% rbind
Cattle %>%
rowwise() %>%
summarise(across(everything(), ~ lapply(1:cattle, function(i) everything())))
Cattle
Cattle[c(1, 1, 1),]
Cattle[rep(id, each = cattle)]
Cattle[rep(id, each = cattle), ]
sum(Cattle$cattle)
rep(c(1, 2, 3), each = c(3, 2, 1))
Cattle[rep(id, cattle), ]
as_tibble(iris)[c(1,1,1), ]
Cattle$cattle
Cattle$infect
rep(c(1, 0), Cattle$infect - Cattle$cattle)
map2(Cattle$cattle, Cattle$cattle - Cattle$infect, ~ rep(c(1, 0), c(.x, .y)))
map2_dbl(Cattle$cattle, Cattle$cattle - Cattle$infect, ~ rep(c(1, 0), c(.x, .y)))
unlist(map2(Cattle$cattle, Cattle$cattle - Cattle$infect, ~ rep(c(1, 0), c(.x, .y))))
unlist(map2(Cattle$infect, Cattle$cattle - Cattle$infect, ~ rep(c(1, 0), c(.x, .y))))
Cattle[rep(id, cattle),
infect := unlist(map2(infect, cattle - infect, ~ rep(c(1, 0), c(.x, .y))))]
Cattle[rep(id, cattle), ] %>%
mutate(infect = unlist(map2(infect, cattle - infect, ~ rep(c(1, 0), c(.x, .y)))))
Cattle %>%
mutate(infect = unlist(map2(infect, cattle - infect, ~ rep(c(1, 0), c(.x, .y))))) %>%
.[rep(id, cattle), ]
Cattle %>%
mutate(infect = unlist(map2(infect, cattle - infect, ~ rep(c(1, 0), c(.x, .y)))))
infect = Cattle$infect
cattle = Cattle$cattle
Cattle[rep(id, cattle), ] %>%
mutate(infect = unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y)))))
infect_ = Cattle$infect
cattle_ = Cattle$cattle
Cattle[rep(id, cattle), ] %>%
mutate(infect = unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y)))))
Cattle[rep(id, cattle), ] %>%
mutate(infect = unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))) %>%
View()
Cattle_expanded = Cattle[rep(id, cattle), ] %>%
mutate(infect = unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y)))))
Model1 = glm(cbind(infect, cattle - infect) ~ factor(group) + dfactor, family = binomial(link = logit), data = Cattle)
summary(Model1)
Model2 = glm(infect ~ factor(group) + dfactor, family = binomial(link = logit), data = Cattle_expanded)
summary(Model2)
View(Cattle_expanded)
infect_ = Cattle$infect
cattle_ = Cattle$cattle
Cattle_expanded = Cattle[rep(id, cattle), ] %>%
mutate(infect = unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y)))))
Cattle_expanded
Cattle_expanded = Cattle[rep(id, cattle),
infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
Cattle
Cattle = fread(
"
id    group dfactor cattle infect
1      1       1     11      8
2      1       2     10      7
3      1       3     12      5
4      1       4     11      3
5      1       5     12      2
6      2       1     10     10
7      2       2     10      9
8      2       3     12      8
9      2       4     11      6
10     2       5     10      4
"
)
Cattle_expanded = copy(Cattle)[rep(id, cattle),
infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
Cattle_expanded = copy(Cattle)
Cattle_expanded[rep(id, cattle),
infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
Cattle = fread(
"
id    group dfactor cattle infect
1      1       1     11      8
2      1       2     10      7
3      1       3     12      5
4      1       4     11      3
5      1       5     12      2
6      2       1     10     10
7      2       2     10      9
8      2       3     12      8
9      2       4     11      6
10     2       5     10      4
"
)
infect_ = Cattle$infect
cattle_ = Cattle$cattle
Cattle_expanded = copy(Cattle)
Cattle_expanded[rep(id, cattle),
infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
View(Cattle_expanded)
Cattle
with(Cattle, rep(id, cattle))
Cattle_expanded = copy(Cattle)[rep(id, cattle), ]
Cattle_expanded
Cattle_expanded[, infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
Cattle_expanded = copy(Cattle)[rep(id, cattle),
][, infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))
]
Cattle_expanded
Cattle_expanded
Cattle_expanded = copy(Cattle)
Cattle_expanded[rep(id, cattle), infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
Cattle_expanded = copy(Cattle)[rep(id, cattle), ]
Cattle_expanded[, infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
with(Cattle, cbind(infect, cattle - infect))
library(tidyverse)
data = as_tibble(iris)
data
data %>%
View()
data %>%
group_by(Species) %>%
summarise(across(everything(), mean))
# select的作用是选择一列或多列
data %>%
select(Species)
sapply(data, type)
sapply(data, typeof)
sapply(data, class)
data %>%
select(features)
data %>%
select(all_of(features))
# 选择iris中所有的数值列的列名
# sapply在example2中有介绍
features = colnames(data)[sapply(data, class) == "numeric"]
# 注意这个会报错
# select内只能选择列名，不能接受一个变量
data %>%
select(features)
data %>%
select(all_of(features))
# 如果我们想正确的查找一个变量内的若干列
# 应该用all_of等函数括起来
# 除了all_of外，还有诸如any_of的其他函数，请自行翻阅学习
data %>%
select(all_of(features))
# 如果只能这么做的话那tidyverse也称不上强大
iris[, features]
data %>%
select(where(is.numeric))
data %>%
select(c(T, T, T, T, F))
data %>%
select(1, 2)
Cattle = data.table::fread(
"
id    group dfactor cattle infect
1      1       1     11      8
2      1       2     10      7
3      1       3     12      5
4      1       4     11      3
5      1       5     12      2
6      2       1     10     10
7      2       2     10      9
8      2       3     12      8
9      2       4     11      6
10     2       5     10      4
"
)
data=Cattle %>%
rowwise() %>%
mutate(infected=list(c(rep(1,infect),rep(0,cattle-infect)))) %>%
unnest()
# where、contains是dplyr里的函数
# 其作用是用于选择列，对列做判断
# 这里只简单介绍where
data %>%
select(where(is.numeric))
# 以下是分组汇总每种花各个特征的平均数
# 使用管道显得简洁明了
data %>%
group_by(Species) %>%
summarise(across(everything(), mean))
# tibble是tidyverse的dataframe，是dataframe的超集
data = as_tibble(iris)
# where、contains是dplyr里的函数
# 其作用是用于选择列，对列做判断
# 这里只简单介绍where
data %>%
select(where(is.numeric))
data %>%
select(!where(is.numeric))
data %>%
select(!Species)
data %>%
select(-Species)
!c(T, T, F)
data %>%
select(-where(is.numeric))
-c(T, T, F)
data %>%
select(1, 1, 0)
data %>%
mutate(new = 1)
data %>%
mutate(Species = 1)
# 变换
data %>%
mutate(sum = Sepal.Length + Sepal.Width)
# 有的时候我们想只修改特定条件下的列
data %>%
mutate(new_Sepal.Length = ifelse(Species == "setosa", Sepal.Length + 100, Sepal.Length))
# 有的时候我们想什么都不做
data %>%
select(everything())
# 有的时候我们相对多列进行相同的操作
# 难道我们要一个一个写出来吗？
data %>%
mutate(Sepal.Length = Sepal.Length ** 2,
Sepal.Width = Sepal.Width ** 2,
Petal.Length = Petal.Length ** 2,
Petal.Width = Petal.Width ** 2)
# 千万注意是where(is.numeric)不是where(is.numeric())
# 至于为什么就不能加那个括号在example2中可能有所了解
data %>%
mutate(across(where(is.numeric), function(vec) vec ** 2))
data %>%
mutate(across(where(is.numeric), square))
# 这是函数写法，在example2中有所涉及
square = function(vec) vec ** 2
data %>%
mutate(across(where(is.numeric), square))
data %>%
select(1:4)
# 行名索引
data %>%
select(Sepal.Length:Petal.Width)
data %>%
mutate(across(where(~ is.numeric(.x)), ~ .x ** 2))
data %>%
mutate(across(where(\(.x) is.numeric(.x)), ~ .x ** 2))
# 我们可以这么理解，一旦一个函数加了括号，他就已经被执行了
function_test = function() features
function_test()
data %>%
select(all_of(function_test()))
data %>%
select(where(function_test()))
data %>%
select(all_of(function_test()))
# group_by和summarise是对分组数据进行描述的方法
# 就是先分组，再汇总
data %>%
group_by(Species) %>%
summarise(Sepal.Length_mean = mean(Sepal.Length))
# 同理，summarise里也可以用across
data %>%
group_by(Species) %>%
summarise(across(everything(), mean))
# 同理，summarise里也可以用where匿名函数
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ mean(.x)))
# 同理，summarise里也可以用where匿名函数
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ mean(.x)))
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ks.test))
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ ks.test(.x)))
ks.test(1:50)
shapiro.test(1:50)
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), shapiro.test))
# 同理，summarise里也可以用where匿名函数
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ mean(.x)))
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ shapiro.test(.x)))
shapiro.test(1:50)
a = shapiro.test(1:50)
a$p.value
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ shapiro.test(.x)$p.value))
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ list(shapiro.test(.x))))
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ list(shapiro.test(.x)))) %>%
View()
View(.[[2]][[1]])
View(.[[2]][[1]])
View(.[[2]][[1]])
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ list(shapiro.test(.x)))) %>%
unnest()
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ shapiro.test(.x))) %>%
unnest()
data %>%
group_nest(Species) %>%
summarise(across(where(is.numeric), ~ shapiro.test(.x)))
data %>%
group_nest(Species) %>%
summarise(across(where(is.numeric), shapiro.test))
data %>%
group_nest(Species)
# 简单做个正态性检验
data %>%
group_by(Species) %>%
summarise(across(where(is.numeric), ~ shapiro.test(.x)$p.value))
# group_nest是group_by的一种变体，但是用法和group_by完全不一样
# 书中有详解，这里不过多介绍
data %>%
group_nest(Species) %>%
mutate(models = map(data, ~ lm(Sepal.Length ~ ., data = .x)))
Cattle = fread(
"
id    group dfactor cattle infect
1      1       1     11      8
2      1       2     10      7
3      1       3     12      5
4      1       4     11      3
5      1       5     12      2
6      2       1     10     10
7      2       2     10      9
8      2       3     12      8
9      2       4     11      6
10     2       5     10      4
"
)
library(data.table)
library(tidyverse)
Cattle = fread(
"
id    group dfactor cattle infect
1      1       1     11      8
2      1       2     10      7
3      1       3     12      5
4      1       4     11      3
5      1       5     12      2
6      2       1     10     10
7      2       2     10      9
8      2       3     12      8
9      2       4     11      6
10     2       5     10      4
"
)
Cattle %>%
group_nest(id)
Cattle %>%
group_nest(id) %>% View()
View(.[[2]][[1]])
Cattle %>%
group_nest(id) %>%
mutate(infected = pmap(data, c(rep(1, ..4), rep(1, ..3 - ..4))))
Cattle %>%
group_nest(id) %>%
mutate(infected = pmap(data, list(c(rep(1, ..4), rep(1, ..3 - ..4)))))
a = Cattle %>%
group_nest(id)
a$data
a$data[[1]]
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, list(c(rep(1, infect), rep(1, cattle  - infect)))))
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ list(c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))))
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect))))
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest(infected) %>%
select(-infect)
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest(infected) %>%
select(-infect)
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest(infected) %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest(infected)
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(1, .x$cattle  - .x$infect)))) %>%
unnest() %>%
View()
Cattle %>%
group_by(id) %>%
mutate(infected = list(c(rep(1, .infect), rep(1, cattle-infect))))
Cattle %>%
group_by(id) %>%
mutate(infected = list(c(rep(1, infect), rep(1, cattle-infect))))
Cattle %>%
group_by(id) %>%
mutate(infected = list(c(rep(1, infect), rep(1, cattle-infect)))) %>%
unnest() %>%
View()
Cattle %>%
group_by(id) %>%
mutate(infected = list(c(rep(1, infect), rep(0, cattle-infect))))
Cattle %>%
group_by(id) %>%
mutate(infected = list(c(rep(1, infect), rep(0, cattle-infect)))) %>%
unnest() %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ list(c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect))))) %>%
unnest() %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ list(c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect))))) %>%
unnest(infected) %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ list(c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect))))) %>%
unnest(data, infected) %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ list(c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))))
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ list(c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect))))) %>%
View()
View(.[[3]][[1]])
library(data.table)
library(tidyverse)
Cattle = fread(
"
id    group dfactor cattle infect
1      1       1     11      8
2      1       2     10      7
3      1       3     12      5
4      1       4     11      3
5      1       5     12      2
6      2       1     10     10
7      2       2     10      9
8      2       3     12      8
9      2       4     11      6
10     2       5     10      4
"
)
infect_ = Cattle$infect
cattle_ = Cattle$cattle
Cattle_expanded = copy(Cattle)[rep(id, cattle), ]
Cattle_expanded[, infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))]
Cattle_expanded
Model1 = glm(cbind(infect, cattle - infect) ~ factor(group) + dfactor, family = binomial(link = logit), data = Cattle)
summary(Model1)
Model2 = glm(infect ~ factor(group) + dfactor, family = binomial(link = logit), data = Cattle_expanded)
summary(Model2)
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))) %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))) %>%
unnest(data)
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))) %>%
unnest(data) %>%
unnest(infected)
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))) %>%
unnest(data) %>%
unnest(infected) %>%
View()
Cattle %>%
group_nest(id) %>%
mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))) %>%
unnest(data) %>%
unnest(infected) %>%
select(-infect)
