cat("And I work as", employee_[["job"]], "\n")
}))
Mike = employee$new("Mike", 1000)
person = R6Class(
classname = "anyone",
public = list(
name = NULL,
initialize = function(name, income) {
self$name = name
private$income = income
},
printInfo = function() {
cat("My name is", self$name, "\n")
cat("I get", private$income, "a month", "\n")
invisible(self)
}),
private = list(income = 0)
)
Mike = employee$new("Mike", 1000)
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
printInfo = function(draw = 0) {
super$printInfo()
cat("And I work as", employee_[["job"]], "\n")
}))
Mike = employee$new("Mike", 1000)
Mike$printInfo()
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
printInfo = function(draw = 0) {
super$printInfo()
cat("And I work as", private$income, "\n")
}))
Mike = employee$new("Mike", 1000)
Mike$printInfo()
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
initialize = function(name, income, job) {
super$initialize(name, income)
private$job = job
},
printInfo = function() {
super$printInfo()
cat("And I work as", private$income, "\n")
}
),
private = list(job = NULL)
)
person = R6Class(
classname = "anyone",
public = list(
name = NULL,
initialize = function(name, income) {
self$name = name
private$income = income
},
printInfo = function() {
cat("My name is", self$name, "\n")
cat("I get", private$income, "a month", "\n")
invisible(self)
}
),
private = list(income = NULL)
)
Jack = person$new("Jack", 100)
class(Jack)
Jack$printInfo()
Jack = person$new("Jack", 100)
Jack
Jack = person$new("Jack", 100)
class(Jack)
Jack$printInfo()
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
initialize = function(name, income, job) {
super$initialize(name, income)
private$job = job
},
printInfo = function() {
super$printInfo()
cat("And I work as", private$income, "\n")
}
),
private = list(job = NULL)
)
Mike = employee$new("Mike", 1000)
Mike = employee$new("Mike", 1000, "worker")
Mike$printInfo()
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
initialize = function(name, income, job) {
super$initialize(name, income)
private$job = job
},
printInfo = function() {
super$printInfo()
cat("And I work as", private$job, "\n")
}
),
private = list(job = NULL)
)
Mike = employee$new("Mike", 1000, "worker")
Jack
Jack = person$new("Jack", 100); Jack
class(Jack)
Jack$printInfo()
Mike = employee$new("Mike", 1000, "worker")
Mike$printInfo()
Mike = employee$new("Mike", 1000, "worker"); Mike
boss = R6Class(
classname = "staff",
inherit = employee,
public = list(
initialize = function(name, income, job, status) {
super$initialize(name, income, job)
private$status = status
},
printInfo = function() {
super$printInfo()
cat("I am", private$status, "\n")
}
),
private = list(status = NULL)
)
Bob = boss$new("Bob", 10000, "manager", "rich")
Bob$printInfo()
with(sleep, t.test(extra[group == 1], extra[group == 2]))
t.test(extra ~ group, sleep)
with(sleep, t.test(extra[group == 1], extra[group == 2])) -> a
t.test(extra ~ group, sleep) -> b
all.equal(a, b)
methods("t.test")
getAnywhere("t.test.default")
getAnywhere("t.test.formula")
set.seed(42)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
example_tbl = as_tibble(iris)
print(iris[1:10, ])
print(example_tbl)
with(sleep, t.test(extra[group == 1], extra[group == 2]))
t.test(extra ~ group, sleep)
class(iris); class(example_tbl)
setwd('./raw/')
render("./example8.Rmd", "html_document")
rmarkdown::"html_document"
rmarkdown::render("./example8.Rmd", "html_document")
list(class(iris), class(example_tbl))
a = with(sleep, t.test(extra[group == 1], extra[group == 2]))
b = t.test(extra ~ group, sleep)
c = list(a, b); names(c) = c("numeric", "formula"); c
method("print")
methods("print")
methods("print")
list(getAnywhere("print.data.frame"), getAnywhere("print.tbl"))
methods("t.test")
getAnywhere("t.test.formula")
f = function(x) UseMethod("f")
f.a = function(x) return("Class a")
f.default = function(x) return("Unknown class")
x = structure(list(), class = "a")
y = structure(list(), class = c("b", "a"))
z = structure(list(), class = "c")
list(f(x), f(y), f(z))
x = list; class(x) = c("a", "b", "c")
y = structure(list(), class = "a")
list(class(x), class(y))
x = list; class(x) = c("a", "b", "c")
y = structure(list(), class = c("a", "b", "c"))
list(class(x), class(y))
x <- 1
attr(x,'class') <- c('first','second')
Cate <- function(x,...)UseMethod('Cate')
Cate.first <- function(x,...){
print(match.call())
print(paste('first:',x))
print('---------------------')
NextMethod()                ## This will call Cate.second
}
Cate.second <- function(x,y){
print(match.call())
print(paste('second:',x,y))
}
Cate(x,1:3)
person   = structure(c(name = "A"), class = c("person"))
employee = structure(c(name = "B", job = "worker"), class = c("employee", "person"))
boss     = structure(c(name = "C", job = "manager", status = "rich"), class = c("boss", "employee", "person"))
introduce_yourself = function(person) UseMethod("introduce_yourself")
introduce_yourself.person = function(person_) {
cat("My name is", person_[["name"]], "\n")
}
introduce_yourself.employee = function(employee_) {
NextMethod()
cat("And I work as", employee_[["job"]], "\n")
}
introduce_yourself.boss = function(boss_) {
NextMethod()
cat("I am", boss_[["status"]], "\n")
}
list(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss)
)
cat(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss), sep = "\n"
)
cat(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss), sep = "\n --- \n"
)
cat(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss), sep = "\n --- \n"
)
cat(
introduce_yourself(person), "\n --- \n",
introduce_yourself(employee), "\n --- \n",
introduce_yourself(boss)
cat(
introduce_yourself(person), "\n --- \n",
introduce_yourself(employee), "\n --- \n",
introduce_yourself(boss))
person   = structure(c(name = "A"), class = c("person"))
employee = structure(c(name = "B", job = "worker"), class = c("employee", "person"))
boss     = structure(c(name = "C", job = "manager", status = "rich"), class = c("boss", "employee", "person"))
introduce_yourself = function(person) UseMethod("introduce_yourself")
introduce_yourself.person = function(person_) {
cat("---\n Hi\n")
cat("My name is", person_[["name"]], "\n")
}
introduce_yourself.employee = function(employee_) {
NextMethod()
cat("And I work as", employee_[["job"]], "\n")
}
introduce_yourself.boss = function(boss_) {
NextMethod()
cat("I am", boss_[["status"]], "\n")
}
cat(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss))
person   = structure(c(name = "A"), class = c("person"))
employee = structure(c(name = "B", job = "worker"), class = c("employee", "person"))
boss     = structure(c(name = "C", job = "manager", status = "rich"), class = c("boss", "employee", "person"))
introduce_yourself = function(person) UseMethod("introduce_yourself")
introduce_yourself.person = function(person_) {
cat("---\nHi\n")
cat("My name is", person_[["name"]], "\n")
}
introduce_yourself.employee = function(employee_) {
NextMethod()
cat("And I work as", employee_[["job"]], "\n")
}
introduce_yourself.boss = function(boss_) {
NextMethod()
cat("I am", boss_[["status"]], "\n")
}
cat(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss))
person   = structure(c(name = "A"), class = c("person"))
employee = structure(c(name = "B", job = "worker"), class = c("employee", "person"))
boss     = structure(c(name = "C", job = "manager", status = "rich"), class = c("boss", "employee", "person"))
introduce_yourself = function(person) UseMethod("introduce_yourself")
introduce_yourself.person = function(person_) {
cat("---\nHi\n")
cat("My name is", person_[["name"]], "\n")
}
introduce_yourself.employee = function(employee_) {
NextMethod()
cat("And I work as", employee_[["job"]], "\n")
}
introduce_yourself.boss = function(boss_) {
NextMethod()
cat("I am", boss_[["status"]], "\n")
}
cat(
introduce_yourself(person),
introduce_yourself(employee),
introduce_yourself(boss)
)
person   = structure(c(name = "A"), class = c("person"))
employee = structure(c(name = "B", job = "worker"), class = c("employee", "person"))
boss     = structure(c(name = "C", job = "manager", status = "rich"), class = c("boss", "employee", "person"))
introduce_yourself = function(person) UseMethod("introduce_yourself")
introduce_yourself.person = function(person_) {
cat("---\nHi\n")
cat("My name is", person_[["name"]], "\n")
}
introduce_yourself.employee = function(employee_) {
NextMethod()
cat("And I work as", employee_[["job"]], "\n")
}
introduce_yourself.boss = function(boss_) {
NextMethod()
cat("I am", boss_[["status"]], "\n")
}
introduce_yourself(person); introduce_yourself(employee); introduce_yourself(boss)
library(R6)
person = R6Class(
classname = "anyone",
public = list(
name = NULL,
initialize = function(name, income) {
self$name = name
private$income = income
},
printInfo = function() {
cat("---\nHi\n")
cat("My name is", self$name, "\n")
cat("I get", private$income, "a month", "\n")
invisible(self)
}
),
private = list(income = NULL)
)
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
initialize = function(name, income, job) {
super$initialize(name, income)
private$job = job
},
printInfo = function() {
super$printInfo()
cat("And I work as", private$job, "\n")
}
),
private = list(job = NULL)
)
boss = R6Class(
classname = "staff",
inherit = employee,
public = list(
initialize = function(name, income, job, status) {
super$initialize(name, income, job)
private$status = status
},
printInfo = function() {
super$printInfo()
cat("I am", private$status, "\n")
}
),
private = list(status = NULL)
)
Jack = person$new("Jack", 100)
Mike = employee$new("Mike", 1000, "worker"); Mike
Bob = boss$new("Bob", 10000, "manager", "rich")
Mike$printInfo()
Jack$printInfo()
Bob$printInfo()
library(R6)
person = R6Class(
classname = "anyone",
public = list(
name = NULL,
initialize = function(name, income) {
self$name = name
private$income = income
},
printInfo = function() {
cat("---\nHi\n")
cat("My name is", self$name, "\n")
cat("I get", private$income, "a month", "\n")
invisible(self)
}
),
private = list(income = NULL)
)
employee = R6Class(
classname = "staff",
inherit = person,
public = list(
initialize = function(name, income, job) {
super$initialize(name, income)
private$job = job
},
printInfo = function() {
super$printInfo()
cat("And I work as", private$job, "\n")
}
),
private = list(job = NULL)
)
boss = R6Class(
classname = "staff",
inherit = employee,
public = list(
initialize = function(name, income, job, status) {
super$initialize(name, income, job)
private$status = status
},
printInfo = function() {
super$printInfo()
cat("I am", private$status, "\n")
}
),
private = list(status = NULL)
)
Jack = person$new("Jack", 100)
Mike = employee$new("Mike", 1000, "worker")
Bob = boss$new("Bob", 10000, "manager", "rich")
Mike$printInfo()
Jack$printInfo()
Bob$printInfo()
library(rmarkdown)
render("./example8.Rmd", "html_document")
setwd("..")
bookdown::preview_chapter("example8.Rmd",
output_format="bookdown::gitbook")
bookdown::render_book("index.Rmd",
output_format="bookdown::gitbook")
bookdown::render_book("index.Rmd", output_format="bookdown::gitbook")
bookdown::render_book("index.Rmd", output_format="bookdown::gitbook")
bookdown::render_book("index.Rmd", output_format="bookdown::gitbook")
Sys.info()
Sys.info()
readClipboard()
readClipboard
base:::C_readClipboard
.Call(C_readClipboard, format, raw)
magick::image_read('clipboard:')
magick::image_read
citr:::insert_citation()
citr:::insert_citation
rstudioapi::insertText(text = "ABC", id = context$id)
rstudioapi::insertText(text = "ABC", id = "ABC")
range <- rstudioapi::document_range(c(1, 0), c(2, 0))
rstudioapi::insertText(range, text)
fmt <- "# This document was last modified on %s.\n"
text <- sprintf(fmt, Sys.Date())
rstudioapi::insertText(range, text)
context <- rstudioapi::getConsoleEditorContext()
id <- context$id
# send some R code to the console
rstudioapi::insertText(text = "print(1 + 1)", id = id)
context <- rstudioapi::getSourceEditorContext()
id <- context$id
# send some R code to the console
rstudioapi::insertText(text = "print(1 + 1)", id = id)
print(1 + 1)
# send some R code to the console
rstudioapi::insertText(text = "print(1 + 1)", id = id)
# send some R code to the console
rstudioapi::insertText(text = "print(1 + 1)", id = id)
a = function() {
context <- rstudioapi::getSourceEditorContext()
id <- context$id
rstudioapi::insertText(text = "print(1 + 1)", id = id)
}
a()
kaca:::kaca()
remotes::install_github("Vinnish-A/kaca")
kaca:::kaca()
kaca:::kaca()
kaca:::kaca()
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('F:/0Local/杂项/file46dc471f35a3.bmp')
kaca:::kaca()
kaca:::kaca()
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('F:/0Local/杂项/file36746f3f3da9.jpeg')
kaca:::kaca()
knitr::include_graphics('F:/0Local/杂项/file367439c860b0.gif')
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#有数据如下
#   type
# 1 a, b
# 2    -
# 3    a
#需统计其出现位置，如下
#      a b -
# [1,] 1 1 0
# [2,] 0 0 1
# [3,] 1 0 0
data = data.frame(type = c("a, b", "-", "a"))
type = data$type %>%
unique() %>%
str_split(", ") %>%
unlist() %>%
unique()
map_dfc(type, ~ as.numeric(grepl(.x)), x = data$type)
map_dfc(type, ~ as.numeric(grepl()), x = data$type)
map_dfc(type, data$type, ~ as.numeric(grepl(.x, .y)))
type
map_dfc(type, ~ as.numeric(grepl(.x, data$type)))
map2_dfc(type, data$type, ~ as.numeric(grepl(.x, .y)))
map2_dfc(type, data$type, ~ as.numeric(grepl(.x, .y)))
names(type) = type
map(type, \(x, invec = data$type) as.numeric(grepl(x, invec))) %>%
as_tibble()
map2_dfc(type, data$type, ~ as.numeric(grepl(.x, .y)))
bookdown::render_book("index.Rmd", output_format="bookdown::gitbook")
