[["index.html", "R 1  1.1  1.2 project 1.3  1.4  1.5  1.6 ", " R Vinnish  1  1.1  RRRstudio RRCranBioconductorcrangithubbioconductortidyversemlr3versemlr3probaannoprobebioconductordevtoolsinstall_githubbaseinstall.packages  Rtidyverse R mlr3ppt 1.2 project FileNew Project 1.3  1.3.1  txtcsvtsvtidyverseread_csvread.csvtidyverseselectfiltermutateacrossgroup_bysummariser 1.3.2  example1.R airquality  meanna OzoneTemp tidyversebaseRR 1.4  1.4.1  R r + - * ** / // r ! &amp; | rif for90% r $ [] [[]] rapplyapplylapply chatgpt 1.4.2  example2.R  data_task = readRDS(&quot;./data/.Rds&quot;) head(data_task) ## # A tibble: 6 × 14 ## A6 A5 A4 A3 A2 A1 G6 G5 G4 G3 G2 G1 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 R A Q L S Q X A X L S X ## 2 A A Q L S Q A A X L S X ## 3 C A Q L S Q S A X L S X ## 4 D A Q L S Q N A X L S X ## 5 E A Q L S Q X A X L S X ## 6 F A Q L S Q F A X L S X ## #  2 more variables: Activity &lt;dbl&gt;, Selectivity &lt;dbl&gt; generator_1 = function(sample_space, num) { # A sample_list_1 = sample_space %&gt;% select(matches(&quot;A&quot;), -Activity) %&gt;% lapply(\\(vec) table(vec)/length(vec)) # G sample_list_2 = sample_space %&gt;% select(matches(&quot;G&quot;)) %&gt;% lapply(\\(vec) table(vec)/length(vec)) #  seq1 = Reduce(paste0, lapply(sample_list_1, \\(.x) sample(names(.x), num, T, .x))) seq2 = Reduce(paste0, lapply(sample_list_2, \\(.x) sample(names(.x), num, T, .x))) list(Sequence1 = seq1, Sequnce2 = seq2) } # 12 generator_2 = function(sample_space, num) { # A sample_list_1 = sample_space %&gt;% select(matches(&quot;A&quot;), -Activity) %&gt;% apply(2, \\(vec) table(vec)/length(vec)) # G sample_list_2 = sample_space %&gt;% select(matches(&quot;G&quot;)) %&gt;% apply(2, \\(vec) table(vec)/length(vec)) #  seq1 = Reduce(paste0, lapply(sample_list_1, \\(.x) sample(names(.x), num, T, .x))) seq2 = Reduce(paste0, lapply(sample_list_2, \\(.x) sample(names(.x), num, T, .x))) list(Sequence1 = seq1, Sequnce2 = seq2) } RRbase 1.5  1.5.1  R R basepaste, paste0, grepgreplstringrstr_c, str_dectet, str_sub, str_extract 3with R base lmglmlmglm  k  1.5.2  example3.R   CDS== transcript== CDS idnameid CDStranscript RRR 1.6  1.6.1   GBDT msermseROC mlr3task 1.6.2  example4.Rexample5.R example4.Rmlr3 rrocaucrtidyversetask3  "],["tidyr.html", "2 tidyr 2.1 iris 2.2 %&gt;%  2.3 select 2.4 mutate 2.5 group_by + summarise 2.6 ", " 2 tidyr 2.1 iris head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # tibbletidyversedataframedataframe data = as_tibble(iris) data ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## #  140 more rows 2.2 %&gt;%  %&gt;%tidyr,, Ctrl + Shift + M data %&gt;% View() #  View(data)   data %&gt;% group_by(Species) %&gt;% summarise(across(everything(), mean)) ## # A tibble: 3 × 5 ## Species Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 3.43 1.46 0.246 ## 2 versicolor 5.94 2.77 4.26 1.33 ## 3 virginica 6.59 2.97 5.55 2.03 2.3 select select data %&gt;% select(Species) ## # A tibble: 150 × 1 ## Species ## &lt;fct&gt; ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa ## 7 setosa ## 8 setosa ## 9 setosa ## 10 setosa ## #  140 more rows iris,sapplyexample2 features = colnames(data)[sapply(data, class) == &quot;numeric&quot;] ,select data %&gt;% select(features) ## Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. ##  Please use `all_of()` or `any_of()` instead. ## # Was: ## data %&gt;% select(features) ## ## # Now: ## data %&gt;% select(all_of(features)) ## ## See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows ,all_of data %&gt;% select(all_of(features)) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows all_ofany_of tidyverse,dataframe iris[, features] ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5.0 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## 11 5.4 3.7 1.5 0.2 ## 12 4.8 3.4 1.6 0.2 ## 13 4.8 3.0 1.4 0.1 ## 14 4.3 3.0 1.1 0.1 ## 15 5.8 4.0 1.2 0.2 ## 16 5.7 4.4 1.5 0.4 ## 17 5.4 3.9 1.3 0.4 ## 18 5.1 3.5 1.4 0.3 ## 19 5.7 3.8 1.7 0.3 ## 20 5.1 3.8 1.5 0.3 ## 21 5.4 3.4 1.7 0.2 ## 22 5.1 3.7 1.5 0.4 ## 23 4.6 3.6 1.0 0.2 ## 24 5.1 3.3 1.7 0.5 ## 25 4.8 3.4 1.9 0.2 ## 26 5.0 3.0 1.6 0.2 ## 27 5.0 3.4 1.6 0.4 ## 28 5.2 3.5 1.5 0.2 ## 29 5.2 3.4 1.4 0.2 ## 30 4.7 3.2 1.6 0.2 ## 31 4.8 3.1 1.6 0.2 ## 32 5.4 3.4 1.5 0.4 ## 33 5.2 4.1 1.5 0.1 ## 34 5.5 4.2 1.4 0.2 ## 35 4.9 3.1 1.5 0.2 ## 36 5.0 3.2 1.2 0.2 ## 37 5.5 3.5 1.3 0.2 ## 38 4.9 3.6 1.4 0.1 ## 39 4.4 3.0 1.3 0.2 ## 40 5.1 3.4 1.5 0.2 ## 41 5.0 3.5 1.3 0.3 ## 42 4.5 2.3 1.3 0.3 ## 43 4.4 3.2 1.3 0.2 ## 44 5.0 3.5 1.6 0.6 ## 45 5.1 3.8 1.9 0.4 ## 46 4.8 3.0 1.4 0.3 ## 47 5.1 3.8 1.6 0.2 ## 48 4.6 3.2 1.4 0.2 ## 49 5.3 3.7 1.5 0.2 ## 50 5.0 3.3 1.4 0.2 ## 51 7.0 3.2 4.7 1.4 ## 52 6.4 3.2 4.5 1.5 ## 53 6.9 3.1 4.9 1.5 ## 54 5.5 2.3 4.0 1.3 ## 55 6.5 2.8 4.6 1.5 ## 56 5.7 2.8 4.5 1.3 ## 57 6.3 3.3 4.7 1.6 ## 58 4.9 2.4 3.3 1.0 ## 59 6.6 2.9 4.6 1.3 ## 60 5.2 2.7 3.9 1.4 ## 61 5.0 2.0 3.5 1.0 ## 62 5.9 3.0 4.2 1.5 ## 63 6.0 2.2 4.0 1.0 ## 64 6.1 2.9 4.7 1.4 ## 65 5.6 2.9 3.6 1.3 ## 66 6.7 3.1 4.4 1.4 ## 67 5.6 3.0 4.5 1.5 ## 68 5.8 2.7 4.1 1.0 ## 69 6.2 2.2 4.5 1.5 ## 70 5.6 2.5 3.9 1.1 ## 71 5.9 3.2 4.8 1.8 ## 72 6.1 2.8 4.0 1.3 ## 73 6.3 2.5 4.9 1.5 ## 74 6.1 2.8 4.7 1.2 ## 75 6.4 2.9 4.3 1.3 ## 76 6.6 3.0 4.4 1.4 ## 77 6.8 2.8 4.8 1.4 ## 78 6.7 3.0 5.0 1.7 ## 79 6.0 2.9 4.5 1.5 ## 80 5.7 2.6 3.5 1.0 ## 81 5.5 2.4 3.8 1.1 ## 82 5.5 2.4 3.7 1.0 ## 83 5.8 2.7 3.9 1.2 ## 84 6.0 2.7 5.1 1.6 ## 85 5.4 3.0 4.5 1.5 ## 86 6.0 3.4 4.5 1.6 ## 87 6.7 3.1 4.7 1.5 ## 88 6.3 2.3 4.4 1.3 ## 89 5.6 3.0 4.1 1.3 ## 90 5.5 2.5 4.0 1.3 ## 91 5.5 2.6 4.4 1.2 ## 92 6.1 3.0 4.6 1.4 ## 93 5.8 2.6 4.0 1.2 ## 94 5.0 2.3 3.3 1.0 ## 95 5.6 2.7 4.2 1.3 ## 96 5.7 3.0 4.2 1.2 ## 97 5.7 2.9 4.2 1.3 ## 98 6.2 2.9 4.3 1.3 ## 99 5.1 2.5 3.0 1.1 ## 100 5.7 2.8 4.1 1.3 ## 101 6.3 3.3 6.0 2.5 ## 102 5.8 2.7 5.1 1.9 ## 103 7.1 3.0 5.9 2.1 ## 104 6.3 2.9 5.6 1.8 ## 105 6.5 3.0 5.8 2.2 ## 106 7.6 3.0 6.6 2.1 ## 107 4.9 2.5 4.5 1.7 ## 108 7.3 2.9 6.3 1.8 ## 109 6.7 2.5 5.8 1.8 ## 110 7.2 3.6 6.1 2.5 ## 111 6.5 3.2 5.1 2.0 ## 112 6.4 2.7 5.3 1.9 ## 113 6.8 3.0 5.5 2.1 ## 114 5.7 2.5 5.0 2.0 ## 115 5.8 2.8 5.1 2.4 ## 116 6.4 3.2 5.3 2.3 ## 117 6.5 3.0 5.5 1.8 ## 118 7.7 3.8 6.7 2.2 ## 119 7.7 2.6 6.9 2.3 ## 120 6.0 2.2 5.0 1.5 ## 121 6.9 3.2 5.7 2.3 ## 122 5.6 2.8 4.9 2.0 ## 123 7.7 2.8 6.7 2.0 ## 124 6.3 2.7 4.9 1.8 ## 125 6.7 3.3 5.7 2.1 ## 126 7.2 3.2 6.0 1.8 ## 127 6.2 2.8 4.8 1.8 ## 128 6.1 3.0 4.9 1.8 ## 129 6.4 2.8 5.6 2.1 ## 130 7.2 3.0 5.8 1.6 ## 131 7.4 2.8 6.1 1.9 ## 132 7.9 3.8 6.4 2.0 ## 133 6.4 2.8 5.6 2.2 ## 134 6.3 2.8 5.1 1.5 ## 135 6.1 2.6 5.6 1.4 ## 136 7.7 3.0 6.1 2.3 ## 137 6.3 3.4 5.6 2.4 ## 138 6.4 3.1 5.5 1.8 ## 139 6.0 3.0 4.8 1.8 ## 140 6.9 3.1 5.4 2.1 ## 141 6.7 3.1 5.6 2.4 ## 142 6.9 3.1 5.1 2.3 ## 143 5.8 2.7 5.1 1.9 ## 144 6.8 3.2 5.9 2.3 ## 145 6.7 3.3 5.7 2.5 ## 146 6.7 3.0 5.2 2.3 ## 147 6.3 2.5 5.0 1.9 ## 148 6.5 3.0 5.2 2.0 ## 149 6.2 3.4 5.4 2.3 ## 150 5.9 3.0 5.1 1.8 wherecontainsdplyr,,select acrossselect,where data %&gt;% select(where(is.numeric)) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows R! !c(T, T, F) ## [1] FALSE FALSE TRUE select-, data %&gt;% select(-Species) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows data %&gt;% select(!Species) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows data %&gt;% select(-where(is.numeric)) ## # A tibble: 150 × 1 ## Species ## &lt;fct&gt; ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa ## 7 setosa ## 8 setosa ## 9 setosa ## 10 setosa ## #  140 more rows data %&gt;% select(!where(is.numeric)) ## # A tibble: 150 × 1 ## Species ## &lt;fct&gt; ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa ## 7 setosa ## 8 setosa ## 9 setosa ## 10 setosa ## #  140 more rows select  data %&gt;% select(1:4) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows  data %&gt;% select(Sepal.Length:Petal.Width) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows ,everything data %&gt;% select(everything()) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## #  140 more rows 2.4 mutate mutate #  data %&gt;% mutate(new = 1) ## # A tibble: 150 × 6 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species new ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 setosa 1 ## 2 4.9 3 1.4 0.2 setosa 1 ## 3 4.7 3.2 1.3 0.2 setosa 1 ## 4 4.6 3.1 1.5 0.2 setosa 1 ## 5 5 3.6 1.4 0.2 setosa 1 ## 6 5.4 3.9 1.7 0.4 setosa 1 ## 7 4.6 3.4 1.4 0.3 setosa 1 ## 8 5 3.4 1.5 0.2 setosa 1 ## 9 4.4 2.9 1.4 0.2 setosa 1 ## 10 4.9 3.1 1.5 0.1 setosa 1 ## #  140 more rows #  data %&gt;% mutate(Species = 1) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 1 ## 2 4.9 3 1.4 0.2 1 ## 3 4.7 3.2 1.3 0.2 1 ## 4 4.6 3.1 1.5 0.2 1 ## 5 5 3.6 1.4 0.2 1 ## 6 5.4 3.9 1.7 0.4 1 ## 7 4.6 3.4 1.4 0.3 1 ## 8 5 3.4 1.5 0.2 1 ## 9 4.4 2.9 1.4 0.2 1 ## 10 4.9 3.1 1.5 0.1 1 ## #  140 more rows #  data %&gt;% mutate(sum = Sepal.Length + Sepal.Width) ## # A tibble: 150 × 6 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species sum ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 setosa 8.6 ## 2 4.9 3 1.4 0.2 setosa 7.9 ## 3 4.7 3.2 1.3 0.2 setosa 7.9 ## 4 4.6 3.1 1.5 0.2 setosa 7.7 ## 5 5 3.6 1.4 0.2 setosa 8.6 ## 6 5.4 3.9 1.7 0.4 setosa 9.3 ## 7 4.6 3.4 1.4 0.3 setosa 8 ## 8 5 3.4 1.5 0.2 setosa 8.4 ## 9 4.4 2.9 1.4 0.2 setosa 7.3 ## 10 4.9 3.1 1.5 0.1 setosa 8 ## #  140 more rows ,ifelse ifelse?ifelse data %&gt;% mutate(Sepal.Length_new = ifelse(Species == &quot;setosa&quot;, Sepal.Length + 10, Sepal.Length)) ## # A tibble: 150 × 6 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Length_new ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 setosa 15.1 ## 2 4.9 3 1.4 0.2 setosa 14.9 ## 3 4.7 3.2 1.3 0.2 setosa 14.7 ## 4 4.6 3.1 1.5 0.2 setosa 14.6 ## 5 5 3.6 1.4 0.2 setosa 15 ## 6 5.4 3.9 1.7 0.4 setosa 15.4 ## 7 4.6 3.4 1.4 0.3 setosa 14.6 ## 8 5 3.4 1.5 0.2 setosa 15 ## 9 4.4 2.9 1.4 0.2 setosa 14.4 ## 10 4.9 3.1 1.5 0.1 setosa 14.9 ## #  140 more rows , data %&gt;% mutate(Sepal.Length = Sepal.Length ** 2, Sepal.Width = Sepal.Width ** 2, Petal.Length = Petal.Length ** 2, Petal.Width = Petal.Width ** 2) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows no,acrossacrossmutateselect where(is.numeric)where(is.numeric())example2 example2 square = function(vec) vec ** 2 data %&gt;% mutate(across(where(is.numeric), square)) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows ,, data %&gt;% mutate(across(where(is.numeric), function(vec) vec ** 2)) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows # \\()function() data %&gt;% mutate(across(where(is.numeric), \\(vec) vec ** 2)) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows ~.xtidyverse,.x # \\(.x) data %&gt;% mutate(across(where(is.numeric), ~ .x ** 2)) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows where data %&gt;% mutate(across(where(~ is.numeric(.x)), ~ .x ** 2)) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows data %&gt;% mutate(across(where(\\(.x) is.numeric(.x)), ~ .x ** 2)) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 26.0 12.2 1.96 0.04 setosa ## 2 24.0 9 1.96 0.04 setosa ## 3 22.1 10.2 1.69 0.04 setosa ## 4 21.2 9.61 2.25 0.04 setosa ## 5 25 13.0 1.96 0.04 setosa ## 6 29.2 15.2 2.89 0.16 setosa ## 7 21.2 11.6 1.96 0.09 setosa ## 8 25 11.6 2.25 0.04 setosa ## 9 19.4 8.41 1.96 0.04 setosa ## 10 24.0 9.61 2.25 0.01 setosa ## #  140 more rows  function_test = function() features function_test() ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; data %&gt;% select(all_of(function_test())) ## # A tibble: 150 × 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## #  140 more rows 2.5 group_by + summarise group_bysummarise, data %&gt;% group_by(Species) %&gt;% summarise(Sepal.Length_mean = mean(Sepal.Length)) ## # A tibble: 3 × 2 ## Species Sepal.Length_mean ## &lt;fct&gt; &lt;dbl&gt; ## 1 setosa 5.01 ## 2 versicolor 5.94 ## 3 virginica 6.59 summariseacross data %&gt;% group_by(Species) %&gt;% summarise(across(everything(), mean)) ## # A tibble: 3 × 5 ## Species Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 3.43 1.46 0.246 ## 2 versicolor 5.94 2.77 4.26 1.33 ## 3 virginica 6.59 2.97 5.55 2.03 summarisewhere data %&gt;% group_by(Species) %&gt;% summarise(across(where(is.numeric), ~ mean(.x))) ## # A tibble: 3 × 5 ## Species Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 3.43 1.46 0.246 ## 2 versicolor 5.94 2.77 4.26 1.33 ## 3 virginica 6.59 2.97 5.55 2.03  data %&gt;% group_by(Species) %&gt;% summarise(across(where(is.numeric), ~ shapiro.test(.x)$p.value)) ## # A tibble: 3 × 5 ## Species Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 0.460 0.272 0.0548 0.000000866 ## 2 versicolor 0.465 0.338 0.158 0.0273 ## 3 virginica 0.258 0.181 0.110 0.0870 group_nestgroup_bygroup_by,group_nesttibbledataframedataframe lmR~R data %&gt;% group_nest(Species) %&gt;% mutate(models = map(data, ~ lm(Sepal.Length ~ ., data = .x))) ## # A tibble: 3 × 3 ## Species data models ## &lt;fct&gt; &lt;list&lt;tibble[,4]&gt;&gt; &lt;list&gt; ## 1 setosa [50 × 4] &lt;lm&gt; ## 2 versicolor [50 × 4] &lt;lm&gt; ## 3 virginica [50 × 4] &lt;lm&gt; 2.6  data(&quot;diamonds&quot;) #  random_int = function(ratio_min, size) { ratio = runif(1, ratio_min, 3*ratio_min) result = unique(round(runif(round(ratio*size), min = 1, max = size))) return(result) } #  cal_mode = function(vec) { result = names(which.max(table(vec))) if (is.integer(vec)) { return(as.integer(result)) } else { return(result) } } #  ## tidyrfunction(x) rows = nrow(diamonds) data = diamonds %&gt;% select(carat:price) %&gt;% mutate(index = 1:nrow(.), across(everything(), ~ ifelse(index %in% random_int(0.1, rows), NA, .x))) %&gt;% select(-index) #  data_interpolated = data %&gt;% mutate(across(where(is.integer), ~ ifelse(is.na(.x), cal_mode(.x), .x)), across(where(is.double), ~ ifelse(is.na(.x), mean(.x, na.rm = T), .x))) cut data %&gt;% select(cut, where(is.double)) %&gt;% group_by(cut) %&gt;% summarise(n = n(), across(everything(), ~ mean(.x, na.rm = T))) ## # A tibble: 6 × 5 ## cut n carat depth table ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1326 1.03 64.0 59.1 ## 2 2 3996 0.847 62.3 58.7 ## 3 3 9834 0.810 61.8 58.0 ## 4 4 11184 0.898 61.3 58.8 ## 5 5 17522 0.703 61.7 56.0 ## 6 NA 10078 0.792 61.8 57.4 data_interpolated %&gt;% select(cut, where(is.double)) %&gt;% group_by(cut) %&gt;% summarise(num = n(), across(everything(), mean)) ## # A tibble: 5 × 5 ## cut num carat depth table ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1326 0.999 63.7 58.7 ## 2 2 3996 0.840 62.3 58.4 ## 3 3 9834 0.808 61.8 57.9 ## 4 4 11184 0.884 61.3 58.5 ## 5 5 27600 0.745 61.7 56.7 "],["r.html", "3 R 3.1 R 3.2  3.3 for 3.4 for 3.5  3.6  3.7  3.8 ", " 3 R 3.1 R R,R, class(&quot;class&quot;) ## [1] &quot;character&quot; class(c(&quot;class&quot;)) ## [1] &quot;character&quot; class(c(&quot;class1&quot;, &quot;class2&quot;)) ## [1] &quot;character&quot; class(1) ## [1] &quot;numeric&quot; class(c(1)) ## [1] &quot;numeric&quot;  c(1, &quot;class&quot;) ## [1] &quot;1&quot; &quot;class&quot;  list(1, &quot;class&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;class&quot; list(c(1, 2), &quot;class&quot;) ## [[1]] ## [1] 1 2 ## ## [[2]] ## [1] &quot;class&quot; , vec_exp = c(age = 1, class = &quot;class&quot;) vec_exp[[&quot;age&quot;]] ## [1] &quot;1&quot;  vec_exp[[1]] ## [1] &quot;1&quot; vec_exp[1] ## age ## &quot;1&quot; # $ # vec_exp$age lst_exp = list(age = 1, class = &quot;class&quot;)  lst_exp[[1]] ## [1] 1 lst_exp[1] ## $age ## [1] 1  lst_exp[[&quot;age&quot;]] == lst_exp$age ## [1] TRUE lst_exp$age ## [1] 1 lst_exp[1]$age ## [1] 1 names names(lst_exp) ## [1] &quot;age&quot; &quot;class&quot; dataframe,,dataframe data.frame(list(age = c(1, 2), class = c(&quot;class1&quot;, &quot;class2&quot;))) ## age class ## 1 1 class1 ## 2 2 class2 data_exp = data.frame(age = c(1, 2), class = c(&quot;class1&quot;, &quot;class2&quot;)) dataframe var = &quot;age&quot; data_exp$age ## [1] 1 2 data_exp[[&quot;age&quot;]] ## [1] 1 2 data_exp[[var]] ## [1] 1 2  data_exp[1] ## age ## 1 1 ## 2 2 data_exp[[1]] ## [1] 1 2 dataframe[x, y], data_exp[, 1] ## [1] 1 2 data_exp[1, ] ## age class ## 1 1 class1 ,tidyversetibble class(data_exp[1, ]) ## [1] &quot;data.frame&quot; class(data_exp[, 1]) ## [1] &quot;numeric&quot; dataframe,tibble names(data_exp) ## [1] &quot;age&quot; &quot;class&quot; rownames(data_exp) ## [1] &quot;1&quot; &quot;2&quot; 3.2  R,  c(1, 2) + c(2, 3) ## [1] 3 5 c(1, 2) * c(2, 3) ## [1] 2 6 matrix(1:4, nrow = 2) %*% c(1, 2) ## [,1] ## [1,] 7 ## [2,] 10  data_exp %&gt;% apply(2, length) ## age class ## 2 2 rep(c(1, 2), c(3, 5)) ## [1] 1 1 1 2 2 2 2 2 tidyr data_exp %&gt;% mutate(gender = c(&quot;boy&quot;, &quot;boy&quot;), location = paste(gender, &quot;of&quot;, class)) ## age class gender location ## 1 1 class1 boy boy of class1 ## 2 2 class2 boy boy of class2 3.3 for rforfor for (i in 1:10) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 {},{} for (i in 1:10) print(i) ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10  sapply(1:10, function(x) x + 1) ## [1] 2 3 4 5 6 7 8 9 10 11 if (T) print(&quot;TRUE&quot;) ## [1] &quot;TRUE&quot; 3.4 for result = c() for (i in 1:ncol(data_exp)) { result[i] = length(data_exp[[i]]) } result ## [1] 2 2 forapplyapplyapplyapply 3.5  iris %&gt;% select(where(is.numeric)) %&gt;% apply(2, scale) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## [1,] -0.89767388 1.01560199 -1.33575163 -1.3110521482 ## [2,] -1.13920048 -0.13153881 -1.33575163 -1.3110521482 ## [3,] -1.38072709 0.32731751 -1.39239929 -1.3110521482 ## [4,] -1.50149039 0.09788935 -1.27910398 -1.3110521482 ## [5,] -1.01843718 1.24503015 -1.33575163 -1.3110521482 ## [6,] -0.53538397 1.93331463 -1.16580868 -1.0486667950 ## [7,] -1.50149039 0.78617383 -1.33575163 -1.1798594716 ## [8,] -1.01843718 0.78617383 -1.27910398 -1.3110521482 ## [9,] -1.74301699 -0.36096697 -1.33575163 -1.3110521482 ## [10,] -1.13920048 0.09788935 -1.27910398 -1.4422448248 ## [11,] -0.53538397 1.47445831 -1.27910398 -1.3110521482 ## [12,] -1.25996379 0.78617383 -1.22245633 -1.3110521482 ## [13,] -1.25996379 -0.13153881 -1.33575163 -1.4422448248 ## [14,] -1.86378030 -0.13153881 -1.50569459 -1.4422448248 ## [15,] -0.05233076 2.16274279 -1.44904694 -1.3110521482 ## [16,] -0.17309407 3.08045544 -1.27910398 -1.0486667950 ## [17,] -0.53538397 1.93331463 -1.39239929 -1.0486667950 ## [18,] -0.89767388 1.01560199 -1.33575163 -1.1798594716 ## [19,] -0.17309407 1.70388647 -1.16580868 -1.1798594716 ## [20,] -0.89767388 1.70388647 -1.27910398 -1.1798594716 ## [21,] -0.53538397 0.78617383 -1.16580868 -1.3110521482 ## [22,] -0.89767388 1.47445831 -1.27910398 -1.0486667950 ## [23,] -1.50149039 1.24503015 -1.56234224 -1.3110521482 ## [24,] -0.89767388 0.55674567 -1.16580868 -0.9174741184 ## [25,] -1.25996379 0.78617383 -1.05251337 -1.3110521482 ## [26,] -1.01843718 -0.13153881 -1.22245633 -1.3110521482 ## [27,] -1.01843718 0.78617383 -1.22245633 -1.0486667950 ## [28,] -0.77691058 1.01560199 -1.27910398 -1.3110521482 ## [29,] -0.77691058 0.78617383 -1.33575163 -1.3110521482 ## [30,] -1.38072709 0.32731751 -1.22245633 -1.3110521482 ## [31,] -1.25996379 0.09788935 -1.22245633 -1.3110521482 ## [32,] -0.53538397 0.78617383 -1.27910398 -1.0486667950 ## [33,] -0.77691058 2.39217095 -1.27910398 -1.4422448248 ## [34,] -0.41462067 2.62159911 -1.33575163 -1.3110521482 ## [35,] -1.13920048 0.09788935 -1.27910398 -1.3110521482 ## [36,] -1.01843718 0.32731751 -1.44904694 -1.3110521482 ## [37,] -0.41462067 1.01560199 -1.39239929 -1.3110521482 ## [38,] -1.13920048 1.24503015 -1.33575163 -1.4422448248 ## [39,] -1.74301699 -0.13153881 -1.39239929 -1.3110521482 ## [40,] -0.89767388 0.78617383 -1.27910398 -1.3110521482 ## [41,] -1.01843718 1.01560199 -1.39239929 -1.1798594716 ## [42,] -1.62225369 -1.73753594 -1.39239929 -1.1798594716 ## [43,] -1.74301699 0.32731751 -1.39239929 -1.3110521482 ## [44,] -1.01843718 1.01560199 -1.22245633 -0.7862814418 ## [45,] -0.89767388 1.70388647 -1.05251337 -1.0486667950 ## [46,] -1.25996379 -0.13153881 -1.33575163 -1.1798594716 ## [47,] -0.89767388 1.70388647 -1.22245633 -1.3110521482 ## [48,] -1.50149039 0.32731751 -1.33575163 -1.3110521482 ## [49,] -0.65614727 1.47445831 -1.27910398 -1.3110521482 ## [50,] -1.01843718 0.55674567 -1.33575163 -1.3110521482 ## [51,] 1.39682886 0.32731751 0.53362088 0.2632599711 ## [52,] 0.67224905 0.32731751 0.42032558 0.3944526477 ## [53,] 1.27606556 0.09788935 0.64691619 0.3944526477 ## [54,] -0.41462067 -1.73753594 0.13708732 0.1320672944 ## [55,] 0.79301235 -0.59039513 0.47697323 0.3944526477 ## [56,] -0.17309407 -0.59039513 0.42032558 0.1320672944 ## [57,] 0.55148575 0.55674567 0.53362088 0.5256453243 ## [58,] -1.13920048 -1.50810778 -0.25944625 -0.2615107354 ## [59,] 0.91377565 -0.36096697 0.47697323 0.1320672944 ## [60,] -0.77691058 -0.81982329 0.08043967 0.2632599711 ## [61,] -1.01843718 -2.42582042 -0.14615094 -0.2615107354 ## [62,] 0.06843254 -0.13153881 0.25038262 0.3944526477 ## [63,] 0.18919584 -1.96696410 0.13708732 -0.2615107354 ## [64,] 0.30995914 -0.36096697 0.53362088 0.2632599711 ## [65,] -0.29385737 -0.36096697 -0.08950329 0.1320672944 ## [66,] 1.03453895 0.09788935 0.36367793 0.2632599711 ## [67,] -0.29385737 -0.13153881 0.42032558 0.3944526477 ## [68,] -0.05233076 -0.81982329 0.19373497 -0.2615107354 ## [69,] 0.43072244 -1.96696410 0.42032558 0.3944526477 ## [70,] -0.29385737 -1.27867961 0.08043967 -0.1303180588 ## [71,] 0.06843254 0.32731751 0.59026853 0.7880306775 ## [72,] 0.30995914 -0.59039513 0.13708732 0.1320672944 ## [73,] 0.55148575 -1.27867961 0.64691619 0.3944526477 ## [74,] 0.30995914 -0.59039513 0.53362088 0.0008746178 ## [75,] 0.67224905 -0.36096697 0.30703027 0.1320672944 ## [76,] 0.91377565 -0.13153881 0.36367793 0.2632599711 ## [77,] 1.15530226 -0.59039513 0.59026853 0.2632599711 ## [78,] 1.03453895 -0.13153881 0.70356384 0.6568380009 ## [79,] 0.18919584 -0.36096697 0.42032558 0.3944526477 ## [80,] -0.17309407 -1.04925145 -0.14615094 -0.2615107354 ## [81,] -0.41462067 -1.50810778 0.02379201 -0.1303180588 ## [82,] -0.41462067 -1.50810778 -0.03285564 -0.2615107354 ## [83,] -0.05233076 -0.81982329 0.08043967 0.0008746178 ## [84,] 0.18919584 -0.81982329 0.76021149 0.5256453243 ## [85,] -0.53538397 -0.13153881 0.42032558 0.3944526477 ## [86,] 0.18919584 0.78617383 0.42032558 0.5256453243 ## [87,] 1.03453895 0.09788935 0.53362088 0.3944526477 ## [88,] 0.55148575 -1.73753594 0.36367793 0.1320672944 ## [89,] -0.29385737 -0.13153881 0.19373497 0.1320672944 ## [90,] -0.41462067 -1.27867961 0.13708732 0.1320672944 ## [91,] -0.41462067 -1.04925145 0.36367793 0.0008746178 ## [92,] 0.30995914 -0.13153881 0.47697323 0.2632599711 ## [93,] -0.05233076 -1.04925145 0.13708732 0.0008746178 ## [94,] -1.01843718 -1.73753594 -0.25944625 -0.2615107354 ## [95,] -0.29385737 -0.81982329 0.25038262 0.1320672944 ## [96,] -0.17309407 -0.13153881 0.25038262 0.0008746178 ## [97,] -0.17309407 -0.36096697 0.25038262 0.1320672944 ## [98,] 0.43072244 -0.36096697 0.30703027 0.1320672944 ## [99,] -0.89767388 -1.27867961 -0.42938920 -0.1303180588 ## [100,] -0.17309407 -0.59039513 0.19373497 0.1320672944 ## [101,] 0.55148575 0.55674567 1.27004036 1.7063794137 ## [102,] -0.05233076 -0.81982329 0.76021149 0.9192233541 ## [103,] 1.51759216 -0.13153881 1.21339271 1.1816087073 ## [104,] 0.55148575 -0.36096697 1.04344975 0.7880306775 ## [105,] 0.79301235 -0.13153881 1.15674505 1.3128013839 ## [106,] 2.12140867 -0.13153881 1.60992627 1.1816087073 ## [107,] -1.13920048 -1.27867961 0.42032558 0.6568380009 ## [108,] 1.75911877 -0.36096697 1.43998331 0.7880306775 ## [109,] 1.03453895 -1.27867961 1.15674505 0.7880306775 ## [110,] 1.63835547 1.24503015 1.32668801 1.7063794137 ## [111,] 0.79301235 0.32731751 0.76021149 1.0504160307 ## [112,] 0.67224905 -0.81982329 0.87350679 0.9192233541 ## [113,] 1.15530226 -0.13153881 0.98680210 1.1816087073 ## [114,] -0.17309407 -1.27867961 0.70356384 1.0504160307 ## [115,] -0.05233076 -0.59039513 0.76021149 1.5751867371 ## [116,] 0.67224905 0.32731751 0.87350679 1.4439940605 ## [117,] 0.79301235 -0.13153881 0.98680210 0.7880306775 ## [118,] 2.24217198 1.70388647 1.66657392 1.3128013839 ## [119,] 2.24217198 -1.04925145 1.77986923 1.4439940605 ## [120,] 0.18919584 -1.96696410 0.70356384 0.3944526477 ## [121,] 1.27606556 0.32731751 1.10009740 1.4439940605 ## [122,] -0.29385737 -0.59039513 0.64691619 1.0504160307 ## [123,] 2.24217198 -0.59039513 1.66657392 1.0504160307 ## [124,] 0.55148575 -0.81982329 0.64691619 0.7880306775 ## [125,] 1.03453895 0.55674567 1.10009740 1.1816087073 ## [126,] 1.63835547 0.32731751 1.27004036 0.7880306775 ## [127,] 0.43072244 -0.59039513 0.59026853 0.7880306775 ## [128,] 0.30995914 -0.13153881 0.64691619 0.7880306775 ## [129,] 0.67224905 -0.59039513 1.04344975 1.1816087073 ## [130,] 1.63835547 -0.13153881 1.15674505 0.5256453243 ## [131,] 1.87988207 -0.59039513 1.32668801 0.9192233541 ## [132,] 2.48369858 1.70388647 1.49663097 1.0504160307 ## [133,] 0.67224905 -0.59039513 1.04344975 1.3128013839 ## [134,] 0.55148575 -0.59039513 0.76021149 0.3944526477 ## [135,] 0.30995914 -1.04925145 1.04344975 0.2632599711 ## [136,] 2.24217198 -0.13153881 1.32668801 1.4439940605 ## [137,] 0.55148575 0.78617383 1.04344975 1.5751867371 ## [138,] 0.67224905 0.09788935 0.98680210 0.7880306775 ## [139,] 0.18919584 -0.13153881 0.59026853 0.7880306775 ## [140,] 1.27606556 0.09788935 0.93015445 1.1816087073 ## [141,] 1.03453895 0.09788935 1.04344975 1.5751867371 ## [142,] 1.27606556 0.09788935 0.76021149 1.4439940605 ## [143,] -0.05233076 -0.81982329 0.76021149 0.9192233541 ## [144,] 1.15530226 0.32731751 1.21339271 1.4439940605 ## [145,] 1.03453895 0.55674567 1.10009740 1.7063794137 ## [146,] 1.03453895 -0.13153881 0.81685914 1.4439940605 ## [147,] 0.55148575 -1.27867961 0.70356384 0.9192233541 ## [148,] 0.79301235 -0.13153881 0.81685914 1.0504160307 ## [149,] 0.43072244 0.78617383 0.93015445 1.4439940605 ## [150,] 0.06843254 -0.13153881 0.76021149 0.7880306775 3.6  Sepal_Length = iris$Sepal.Length iris %&gt;% select(where(is.numeric), -Sepal.Length) %&gt;% apply(2, \\(vec) cor(vec, Sepal_Length)) ## Sepal.Width Petal.Length Petal.Width ## -0.1175698 0.8717538 0.8179411 applyapply data_num = select(iris, where(is.numeric)) apply(data_num, 2, \\(vec1) apply(data_num, 2, \\(vec2) cor(vec1, vec2))) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Sepal.Length 1.0000000 -0.1175698 0.8717538 0.8179411 ## Sepal.Width -0.1175698 1.0000000 -0.4284401 -0.3661259 ## Petal.Length 0.8717538 -0.4284401 1.0000000 0.9628654 ## Petal.Width 0.8179411 -0.3661259 0.9628654 1.0000000  result = data.frame(matrix(1:16, nrow = 4)) for (a in 1:ncol(data_num)) { for (b in 1:ncol(data_num)) { result[a, b] = cor(data_num[[a]], data_num[[b]]) } } result ## X1 X2 X3 X4 ## 1 1.0000000 -0.1175698 0.8717538 0.8179411 ## 2 -0.1175698 1.0000000 -0.4284401 -0.3661259 ## 3 0.8717538 -0.4284401 1.0000000 0.9628654 ## 4 0.8179411 -0.3661259 0.9628654 1.0000000 forapply result = data.frame(matrix(1:16, nrow = 4)) for (a in 1:ncol(data_num)) { result[[a]] = apply(data_num, 2, \\(vec) cor(data_num[[a]], vec)) } result ## X1 X2 X3 X4 ## 1 1.0000000 -0.1175698 0.8717538 0.8179411 ## 2 -0.1175698 1.0000000 -0.4284401 -0.3661259 ## 3 0.8717538 -0.4284401 1.0000000 0.9628654 ## 4 0.8179411 -0.3661259 0.9628654 1.0000000 3.7  RR  integrate(\\(x) x**3 + x, 0, 1) ## 0.75 with absolute error &lt; 8.3e-15 3.8  # data_exp = as_tibble(data_train_merged[1:100, ]) # saveRDS(data_exp, &quot;.Rds&quot;) data_task = readRDS(&quot;./data/.Rds&quot;) data_task ## # A tibble: 100 × 14 ## A6 A5 A4 A3 A2 A1 G6 G5 G4 G3 G2 G1 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 R A Q L S Q X A X L S X ## 2 A A Q L S Q A A X L S X ## 3 C A Q L S Q S A X L S X ## 4 D A Q L S Q N A X L S X ## 5 E A Q L S Q X A X L S X ## 6 F A Q L S Q F A X L S X ## 7 G A Q L S Q G A X L S X ## 8 H A Q L S Q S A X L S X ## 9 I A Q L S Q I A X L S X ## 10 K A Q L S Q X A X L S X ## #  90 more rows ## #  2 more variables: Activity &lt;dbl&gt;, Selectivity &lt;dbl&gt; generator_1 = function(sample_space, num) { # A sample_list_1 = sample_space %&gt;% select(matches(&quot;A&quot;), -Activity) %&gt;% lapply(\\(vec) table(vec)/length(vec)) # G sample_list_2 = sample_space %&gt;% select(matches(&quot;G&quot;)) %&gt;% lapply(\\(vec) table(vec)/length(vec)) #  seq1 = Reduce(paste0, lapply(sample_list_1, \\(.x) sample(names(.x), num, T, .x))) seq2 = Reduce(paste0, lapply(sample_list_2, \\(.x) sample(names(.x), num, T, .x))) list(Sequence1 = seq1, Sequnce2 = seq2) } generator_1(data_task, 100) ## $Sequence1 ## [1] &quot;MFQLDQ&quot; &quot;RAQLSQ&quot; &quot;RAQLSL&quot; &quot;RAQLAQ&quot; &quot;RAQLSC&quot; &quot;RAYLAQ&quot; &quot;RATLSQ&quot; &quot;RAQLSQ&quot; ## [9] &quot;RAQGSQ&quot; &quot;RAPLMQ&quot; &quot;RAQLSH&quot; &quot;RAQLMI&quot; &quot;RAQDSQ&quot; &quot;RACLSQ&quot; &quot;RAFLSQ&quot; &quot;MAQLSQ&quot; ## [17] &quot;RYTLPP&quot; &quot;RSQLSQ&quot; &quot;RAGLMI&quot; &quot;RFQLSQ&quot; &quot;IAQESQ&quot; &quot;RPQHQF&quot; &quot;RAQLSQ&quot; &quot;IAQLSQ&quot; ## [25] &quot;DAQLSQ&quot; &quot;RAQLST&quot; &quot;RSQLLC&quot; &quot;MYALSQ&quot; &quot;RAQLMQ&quot; &quot;RAQLSQ&quot; &quot;RAQLYQ&quot; &quot;RAQLSQ&quot; ## [33] &quot;RAQLWK&quot; &quot;RAQLSQ&quot; &quot;PAQLGL&quot; &quot;RAQLSM&quot; &quot;RSQLSQ&quot; &quot;RFQLSR&quot; &quot;RAQCSQ&quot; &quot;RAQLSG&quot; ## [41] &quot;TAQTSQ&quot; &quot;FAQLSQ&quot; &quot;RAQLSL&quot; &quot;KAQWRQ&quot; &quot;PFQLSQ&quot; &quot;RFQLSQ&quot; &quot;RANLSQ&quot; &quot;RAQRSC&quot; ## [49] &quot;RAQLSQ&quot; &quot;RAQLSQ&quot; &quot;RAQLSQ&quot; &quot;RAQLSQ&quot; &quot;RAQLSW&quot; &quot;YAQLQQ&quot; &quot;WAQLFR&quot; &quot;GAQLSQ&quot; ## [57] &quot;RAQLSQ&quot; &quot;RAQDSQ&quot; &quot;RAQDGQ&quot; &quot;YAQLSQ&quot; &quot;RAQLSQ&quot; &quot;RAQLSQ&quot; &quot;RAQLTW&quot; &quot;RAGTSQ&quot; ## [65] &quot;RAQGSQ&quot; &quot;RAQLST&quot; &quot;RAWLSQ&quot; &quot;RAQPSA&quot; &quot;RRQLSQ&quot; &quot;RAWESQ&quot; &quot;RAQLSG&quot; &quot;RAQESE&quot; ## [73] &quot;RAQQSQ&quot; &quot;RAQESQ&quot; &quot;RARLSQ&quot; &quot;RSQFSQ&quot; &quot;RAQLSQ&quot; &quot;RALLMQ&quot; &quot;RAQLSQ&quot; &quot;RRQLSQ&quot; ## [81] &quot;RAQLSQ&quot; &quot;RAPRSQ&quot; &quot;SAQLSQ&quot; &quot;RAQLSQ&quot; &quot;RAQLSQ&quot; &quot;TAQLSF&quot; &quot;RAQLSQ&quot; &quot;RAQLSA&quot; ## [89] &quot;RAQLSA&quot; &quot;TAQLLQ&quot; &quot;RAQLSQ&quot; &quot;RRQLSQ&quot; &quot;RAQDSQ&quot; &quot;RPQLSQ&quot; &quot;RAQCSQ&quot; &quot;RAQLSE&quot; ## [97] &quot;RAQLSQ&quot; &quot;RAQLSP&quot; &quot;RAQLSQ&quot; &quot;RAQLSF&quot; ## ## $Sequnce2 ## [1] &quot;XAXLSI&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XXXFSX&quot; &quot;IAXLSX&quot; &quot;XAXLSS&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; ## [9] &quot;SAFLXX&quot; &quot;XAXLSX&quot; &quot;LAXLSX&quot; &quot;XXXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLGX&quot; ## [17] &quot;XAXLSX&quot; &quot;XAXISX&quot; &quot;XAXPSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XASLSL&quot; ## [25] &quot;XAXLPX&quot; &quot;XSXXSX&quot; &quot;XAXLSX&quot; &quot;XAGLSX&quot; &quot;SAXLSF&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAFLSX&quot; ## [33] &quot;XAXLSX&quot; &quot;XAXLFX&quot; &quot;XAXLSX&quot; &quot;SAXLSX&quot; &quot;XGXLSX&quot; &quot;XANLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; ## [41] &quot;XALLSX&quot; &quot;LAXGSI&quot; &quot;XFXFSX&quot; &quot;XAXLXX&quot; &quot;XLXNFX&quot; &quot;XAPLSA&quot; &quot;FAXLSX&quot; &quot;XAXLSX&quot; ## [49] &quot;XAXNSX&quot; &quot;IAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXSSX&quot; &quot;XAXLSX&quot; &quot;XLXLSX&quot; &quot;XAXLSL&quot; &quot;XAXLSX&quot; ## [57] &quot;FAXISN&quot; &quot;XAXFSX&quot; &quot;XAXSSX&quot; &quot;XAXLSP&quot; &quot;XAXLSX&quot; &quot;XXXLSX&quot; &quot;SSXLSX&quot; &quot;XAXLSX&quot; ## [65] &quot;XAXLSX&quot; &quot;XAXXSX&quot; &quot;XAXGSX&quot; &quot;XAXLSX&quot; &quot;XALLSX&quot; &quot;XAXLSS&quot; &quot;XAXLSX&quot; &quot;XAFLFN&quot; ## [73] &quot;XAXXSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXISX&quot; &quot;FAXNSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; ## [81] &quot;XAXLSX&quot; &quot;XXXLSX&quot; &quot;XAXXSX&quot; &quot;XGXPSX&quot; &quot;XGXGSX&quot; &quot;XAXLXS&quot; &quot;XAXLSS&quot; &quot;XLXLSX&quot; ## [89] &quot;XAXLSA&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXLSX&quot; &quot;XAXXSX&quot; &quot;XAXLSX&quot; &quot;XAXLSL&quot; &quot;XAXLSX&quot; ## [97] &quot;XAXLSX&quot; &quot;XAXLSF&quot; &quot;XAXLSX&quot; &quot;NAXLSX&quot; 12 generator_2 = function(sample_space, num) { # A sample_list_1 = sample_space %&gt;% select(matches(&quot;A&quot;), -Activity) %&gt;% apply(2, \\(vec) table(vec)/length(vec)) # G sample_list_2 = sample_space %&gt;% select(matches(&quot;G&quot;)) %&gt;% apply(2, \\(vec) table(vec)/length(vec)) #  seq1 = Reduce(paste0, lapply(sample_list_1, \\(.x) sample(names(.x), num, T, .x))) seq2 = Reduce(paste0, lapply(sample_list_2, \\(.x) sample(names(.x), num, T, .x))) list(Sequence1 = seq1, Sequnce2 = seq2) } generator_2(data_task, 100) "],["r.html", "4 R 4.1  4.2 ", " 4 R 4.1  4.1.1   iris$Species ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica iris[[&quot;Species&quot;]] ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica  iris$Sepal.Length + iris$Sepal.Width + iris$Petal.Length ## [1] 10.0 9.3 9.2 9.2 10.0 11.0 9.4 9.9 8.7 9.5 10.6 9.8 9.2 8.4 11.0 ## [16] 11.6 10.6 10.0 11.2 10.4 10.5 10.3 9.2 10.1 10.1 9.6 10.0 10.2 10.0 9.5 ## [31] 9.5 10.3 10.8 11.1 9.5 9.4 10.3 9.9 8.7 10.0 9.8 8.1 8.9 10.1 10.8 ## [46] 9.2 10.5 9.2 10.5 9.7 14.9 14.1 14.9 11.8 13.9 13.0 14.3 10.6 14.1 11.8 ## [61] 10.5 13.1 12.2 13.7 12.1 14.2 13.1 12.6 12.9 12.0 13.9 12.9 13.7 13.6 13.6 ## [76] 14.0 14.4 14.7 13.4 11.8 11.7 11.6 12.4 13.8 12.9 13.9 14.5 13.0 12.7 12.0 ## [91] 12.5 13.7 12.4 10.6 12.5 12.9 12.8 13.4 10.6 12.6 15.6 13.6 16.0 14.8 15.3 ## [106] 17.2 11.9 16.5 15.0 16.9 14.8 14.4 15.3 13.2 13.7 14.9 15.0 18.2 17.2 13.2 ## [121] 15.8 13.3 17.2 13.9 15.7 16.4 13.8 14.0 14.8 16.0 16.3 18.1 14.8 14.2 14.3 ## [136] 16.8 15.3 15.0 13.8 15.4 15.4 15.1 13.6 15.9 15.7 14.9 13.8 14.7 15.0 14.0 with with(data = iris, expr = Sepal.Length + Sepal.Width + Petal.Length) ## [1] 10.0 9.3 9.2 9.2 10.0 11.0 9.4 9.9 8.7 9.5 10.6 9.8 9.2 8.4 11.0 ## [16] 11.6 10.6 10.0 11.2 10.4 10.5 10.3 9.2 10.1 10.1 9.6 10.0 10.2 10.0 9.5 ## [31] 9.5 10.3 10.8 11.1 9.5 9.4 10.3 9.9 8.7 10.0 9.8 8.1 8.9 10.1 10.8 ## [46] 9.2 10.5 9.2 10.5 9.7 14.9 14.1 14.9 11.8 13.9 13.0 14.3 10.6 14.1 11.8 ## [61] 10.5 13.1 12.2 13.7 12.1 14.2 13.1 12.6 12.9 12.0 13.9 12.9 13.7 13.6 13.6 ## [76] 14.0 14.4 14.7 13.4 11.8 11.7 11.6 12.4 13.8 12.9 13.9 14.5 13.0 12.7 12.0 ## [91] 12.5 13.7 12.4 10.6 12.5 12.9 12.8 13.4 10.6 12.6 15.6 13.6 16.0 14.8 15.3 ## [106] 17.2 11.9 16.5 15.0 16.9 14.8 14.4 15.3 13.2 13.7 14.9 15.0 18.2 17.2 13.2 ## [121] 15.8 13.3 17.2 13.9 15.7 16.4 13.8 14.0 14.8 16.0 16.3 18.1 14.8 14.2 14.3 ## [136] 16.8 15.3 15.0 13.8 15.4 15.4 15.1 13.6 15.9 15.7 14.9 13.8 14.7 15.0 14.0 tidyverse iris %&gt;% mutate(sum = Sepal.Length + Sepal.Width + Petal.Length) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species sum ## 1 5.1 3.5 1.4 0.2 setosa 10.0 ## 2 4.9 3.0 1.4 0.2 setosa 9.3 ## 3 4.7 3.2 1.3 0.2 setosa 9.2 ## 4 4.6 3.1 1.5 0.2 setosa 9.2 ## 5 5.0 3.6 1.4 0.2 setosa 10.0 ## 6 5.4 3.9 1.7 0.4 setosa 11.0 ## 7 4.6 3.4 1.4 0.3 setosa 9.4 ## 8 5.0 3.4 1.5 0.2 setosa 9.9 ## 9 4.4 2.9 1.4 0.2 setosa 8.7 ## 10 4.9 3.1 1.5 0.1 setosa 9.5 ## 11 5.4 3.7 1.5 0.2 setosa 10.6 ## 12 4.8 3.4 1.6 0.2 setosa 9.8 ## 13 4.8 3.0 1.4 0.1 setosa 9.2 ## 14 4.3 3.0 1.1 0.1 setosa 8.4 ## 15 5.8 4.0 1.2 0.2 setosa 11.0 ## 16 5.7 4.4 1.5 0.4 setosa 11.6 ## 17 5.4 3.9 1.3 0.4 setosa 10.6 ## 18 5.1 3.5 1.4 0.3 setosa 10.0 ## 19 5.7 3.8 1.7 0.3 setosa 11.2 ## 20 5.1 3.8 1.5 0.3 setosa 10.4 ## 21 5.4 3.4 1.7 0.2 setosa 10.5 ## 22 5.1 3.7 1.5 0.4 setosa 10.3 ## 23 4.6 3.6 1.0 0.2 setosa 9.2 ## 24 5.1 3.3 1.7 0.5 setosa 10.1 ## 25 4.8 3.4 1.9 0.2 setosa 10.1 ## 26 5.0 3.0 1.6 0.2 setosa 9.6 ## 27 5.0 3.4 1.6 0.4 setosa 10.0 ## 28 5.2 3.5 1.5 0.2 setosa 10.2 ## 29 5.2 3.4 1.4 0.2 setosa 10.0 ## 30 4.7 3.2 1.6 0.2 setosa 9.5 ## 31 4.8 3.1 1.6 0.2 setosa 9.5 ## 32 5.4 3.4 1.5 0.4 setosa 10.3 ## 33 5.2 4.1 1.5 0.1 setosa 10.8 ## 34 5.5 4.2 1.4 0.2 setosa 11.1 ## 35 4.9 3.1 1.5 0.2 setosa 9.5 ## 36 5.0 3.2 1.2 0.2 setosa 9.4 ## 37 5.5 3.5 1.3 0.2 setosa 10.3 ## 38 4.9 3.6 1.4 0.1 setosa 9.9 ## 39 4.4 3.0 1.3 0.2 setosa 8.7 ## 40 5.1 3.4 1.5 0.2 setosa 10.0 ## 41 5.0 3.5 1.3 0.3 setosa 9.8 ## 42 4.5 2.3 1.3 0.3 setosa 8.1 ## 43 4.4 3.2 1.3 0.2 setosa 8.9 ## 44 5.0 3.5 1.6 0.6 setosa 10.1 ## 45 5.1 3.8 1.9 0.4 setosa 10.8 ## 46 4.8 3.0 1.4 0.3 setosa 9.2 ## 47 5.1 3.8 1.6 0.2 setosa 10.5 ## 48 4.6 3.2 1.4 0.2 setosa 9.2 ## 49 5.3 3.7 1.5 0.2 setosa 10.5 ## 50 5.0 3.3 1.4 0.2 setosa 9.7 ## 51 7.0 3.2 4.7 1.4 versicolor 14.9 ## 52 6.4 3.2 4.5 1.5 versicolor 14.1 ## 53 6.9 3.1 4.9 1.5 versicolor 14.9 ## 54 5.5 2.3 4.0 1.3 versicolor 11.8 ## 55 6.5 2.8 4.6 1.5 versicolor 13.9 ## 56 5.7 2.8 4.5 1.3 versicolor 13.0 ## 57 6.3 3.3 4.7 1.6 versicolor 14.3 ## 58 4.9 2.4 3.3 1.0 versicolor 10.6 ## 59 6.6 2.9 4.6 1.3 versicolor 14.1 ## 60 5.2 2.7 3.9 1.4 versicolor 11.8 ## 61 5.0 2.0 3.5 1.0 versicolor 10.5 ## 62 5.9 3.0 4.2 1.5 versicolor 13.1 ## 63 6.0 2.2 4.0 1.0 versicolor 12.2 ## 64 6.1 2.9 4.7 1.4 versicolor 13.7 ## 65 5.6 2.9 3.6 1.3 versicolor 12.1 ## 66 6.7 3.1 4.4 1.4 versicolor 14.2 ## 67 5.6 3.0 4.5 1.5 versicolor 13.1 ## 68 5.8 2.7 4.1 1.0 versicolor 12.6 ## 69 6.2 2.2 4.5 1.5 versicolor 12.9 ## 70 5.6 2.5 3.9 1.1 versicolor 12.0 ## 71 5.9 3.2 4.8 1.8 versicolor 13.9 ## 72 6.1 2.8 4.0 1.3 versicolor 12.9 ## 73 6.3 2.5 4.9 1.5 versicolor 13.7 ## 74 6.1 2.8 4.7 1.2 versicolor 13.6 ## 75 6.4 2.9 4.3 1.3 versicolor 13.6 ## 76 6.6 3.0 4.4 1.4 versicolor 14.0 ## 77 6.8 2.8 4.8 1.4 versicolor 14.4 ## 78 6.7 3.0 5.0 1.7 versicolor 14.7 ## 79 6.0 2.9 4.5 1.5 versicolor 13.4 ## 80 5.7 2.6 3.5 1.0 versicolor 11.8 ## 81 5.5 2.4 3.8 1.1 versicolor 11.7 ## 82 5.5 2.4 3.7 1.0 versicolor 11.6 ## 83 5.8 2.7 3.9 1.2 versicolor 12.4 ## 84 6.0 2.7 5.1 1.6 versicolor 13.8 ## 85 5.4 3.0 4.5 1.5 versicolor 12.9 ## 86 6.0 3.4 4.5 1.6 versicolor 13.9 ## 87 6.7 3.1 4.7 1.5 versicolor 14.5 ## 88 6.3 2.3 4.4 1.3 versicolor 13.0 ## 89 5.6 3.0 4.1 1.3 versicolor 12.7 ## 90 5.5 2.5 4.0 1.3 versicolor 12.0 ## 91 5.5 2.6 4.4 1.2 versicolor 12.5 ## 92 6.1 3.0 4.6 1.4 versicolor 13.7 ## 93 5.8 2.6 4.0 1.2 versicolor 12.4 ## 94 5.0 2.3 3.3 1.0 versicolor 10.6 ## 95 5.6 2.7 4.2 1.3 versicolor 12.5 ## 96 5.7 3.0 4.2 1.2 versicolor 12.9 ## 97 5.7 2.9 4.2 1.3 versicolor 12.8 ## 98 6.2 2.9 4.3 1.3 versicolor 13.4 ## 99 5.1 2.5 3.0 1.1 versicolor 10.6 ## 100 5.7 2.8 4.1 1.3 versicolor 12.6 ## 101 6.3 3.3 6.0 2.5 virginica 15.6 ## 102 5.8 2.7 5.1 1.9 virginica 13.6 ## 103 7.1 3.0 5.9 2.1 virginica 16.0 ## 104 6.3 2.9 5.6 1.8 virginica 14.8 ## 105 6.5 3.0 5.8 2.2 virginica 15.3 ## 106 7.6 3.0 6.6 2.1 virginica 17.2 ## 107 4.9 2.5 4.5 1.7 virginica 11.9 ## 108 7.3 2.9 6.3 1.8 virginica 16.5 ## 109 6.7 2.5 5.8 1.8 virginica 15.0 ## 110 7.2 3.6 6.1 2.5 virginica 16.9 ## 111 6.5 3.2 5.1 2.0 virginica 14.8 ## 112 6.4 2.7 5.3 1.9 virginica 14.4 ## 113 6.8 3.0 5.5 2.1 virginica 15.3 ## 114 5.7 2.5 5.0 2.0 virginica 13.2 ## 115 5.8 2.8 5.1 2.4 virginica 13.7 ## 116 6.4 3.2 5.3 2.3 virginica 14.9 ## 117 6.5 3.0 5.5 1.8 virginica 15.0 ## 118 7.7 3.8 6.7 2.2 virginica 18.2 ## 119 7.7 2.6 6.9 2.3 virginica 17.2 ## 120 6.0 2.2 5.0 1.5 virginica 13.2 ## 121 6.9 3.2 5.7 2.3 virginica 15.8 ## 122 5.6 2.8 4.9 2.0 virginica 13.3 ## 123 7.7 2.8 6.7 2.0 virginica 17.2 ## 124 6.3 2.7 4.9 1.8 virginica 13.9 ## 125 6.7 3.3 5.7 2.1 virginica 15.7 ## 126 7.2 3.2 6.0 1.8 virginica 16.4 ## 127 6.2 2.8 4.8 1.8 virginica 13.8 ## 128 6.1 3.0 4.9 1.8 virginica 14.0 ## 129 6.4 2.8 5.6 2.1 virginica 14.8 ## 130 7.2 3.0 5.8 1.6 virginica 16.0 ## 131 7.4 2.8 6.1 1.9 virginica 16.3 ## 132 7.9 3.8 6.4 2.0 virginica 18.1 ## 133 6.4 2.8 5.6 2.2 virginica 14.8 ## 134 6.3 2.8 5.1 1.5 virginica 14.2 ## 135 6.1 2.6 5.6 1.4 virginica 14.3 ## 136 7.7 3.0 6.1 2.3 virginica 16.8 ## 137 6.3 3.4 5.6 2.4 virginica 15.3 ## 138 6.4 3.1 5.5 1.8 virginica 15.0 ## 139 6.0 3.0 4.8 1.8 virginica 13.8 ## 140 6.9 3.1 5.4 2.1 virginica 15.4 ## 141 6.7 3.1 5.6 2.4 virginica 15.4 ## 142 6.9 3.1 5.1 2.3 virginica 15.1 ## 143 5.8 2.7 5.1 1.9 virginica 13.6 ## 144 6.8 3.2 5.9 2.3 virginica 15.9 ## 145 6.7 3.3 5.7 2.5 virginica 15.7 ## 146 6.7 3.0 5.2 2.3 virginica 14.9 ## 147 6.3 2.5 5.0 1.9 virginica 13.8 ## 148 6.5 3.0 5.2 2.0 virginica 14.7 ## 149 6.2 3.4 5.4 2.3 virginica 15.0 ## 150 5.9 3.0 5.1 1.8 virginica 14.0 4.1.2   a = c(&quot;&quot;, &quot;&quot;, &quot;&quot;) b = c(&quot;&quot;, &quot;&quot;, &quot;&quot;) # pastestringrstr_c paste(a, b) ## [1] &quot; &quot; &quot; &quot; &quot; &quot;  paste(a, b, sep = &quot;&quot;) ## [1] &quot;&quot; &quot;&quot; &quot;&quot; paste0(a, b) ## [1] &quot;&quot; &quot;&quot; &quot;&quot;  paste(a, collapse = &quot;&quot;) ## [1] &quot;&quot; paste0(a, collapse = &quot;&quot;) ## [1] &quot;&quot; paste(paste(a, collapse = &quot;&quot;), paste(b, collapse = &quot;&quot;), sep = &quot;, &quot;) ## [1] &quot;, &quot; str_c(a, b) ## [1] &quot;&quot; &quot;&quot; &quot;&quot; 4.1.3 grep grepgrepl grep(&quot;&quot;, a) ## [1] 1 grep(&quot;&quot;, a) ## [1] 3 grepl(&quot;&quot;, a) ## [1] FALSE FALSE TRUE  grep(&quot;&quot;, a) ## [1] 3 which(grepl(&quot;&quot;, a)) ## [1] 3 str_detectgrepltidy str_detect(a, &quot;&quot;) ## [1] TRUE FALSE FALSE 4.1.4 substr str_sub substr(&quot;&quot;, start = 3, stop = 4) ## [1] &quot;&quot; str_sub(&quot;&quot;, start = 3, end = -2) ## [1] &quot;&quot; 4.1.5 str_extract c = c(&quot;2008430&quot;, &quot;2009MusicRadio&quot;) #  str_extract(c, &quot;\\\\d+&quot;) ## [1] &quot;2008&quot; &quot;2009&quot; str_extract_all(c, &quot;\\\\d+&quot;) ## [[1]] ## [1] &quot;2008&quot; &quot;4&quot; &quot;30&quot; ## ## [[2]] ## [1] &quot;2009&quot; # baseR regmatches(c, gregexpr(&quot;\\\\d+&quot;, c, perl = TRUE)) ## [[1]] ## [1] &quot;2008&quot; &quot;4&quot; &quot;30&quot; ## ## [[2]] ## [1] &quot;2009&quot; 4.1.6 str_subset  grep(&quot;&quot;, a, value = T) ## [1] &quot;&quot; str_subset(a, &quot;&quot;) ## [1] &quot;&quot; 4.1.7 str_split genes = c(&quot;LOC441259 /// POLR2J2&quot;, &quot;KLHDC7B&quot;, &quot;ATAD3A /// ATAD3B /// LOC732419&quot;) strsplit(genes, &quot; /// &quot;) ## [[1]] ## [1] &quot;LOC441259&quot; &quot;POLR2J2&quot; ## ## [[2]] ## [1] &quot;KLHDC7B&quot; ## ## [[3]] ## [1] &quot;ATAD3A&quot; &quot;ATAD3B&quot; &quot;LOC732419&quot; stringrBaseR str_split(genes, &quot; /// &quot;) ## [[1]] ## [1] &quot;LOC441259&quot; &quot;POLR2J2&quot; ## ## [[2]] ## [1] &quot;KLHDC7B&quot; ## ## [[3]] ## [1] &quot;ATAD3A&quot; &quot;ATAD3B&quot; &quot;LOC732419&quot; str_split(genes, &quot; /// &quot;, simplify = T) ## [,1] [,2] [,3] ## [1,] &quot;LOC441259&quot; &quot;POLR2J2&quot; &quot;&quot; ## [2,] &quot;KLHDC7B&quot; &quot;&quot; &quot;&quot; ## [3,] &quot;ATAD3A&quot; &quot;ATAD3B&quot; &quot;LOC732419&quot; 4.2  # # type # 1 a, b # 2 - # 3 a # # a b - # [1,] 1 1 0 # [2,] 0 0 1 # [3,] 1 0 0 data = data.frame(type = c(&quot;a, b&quot;, &quot;-&quot;, &quot;a&quot;))  4.2.1 1.  type = data$type %&gt;% unique() %&gt;% str_split(&quot;, &quot;) %&gt;% unlist() %&gt;% unique() # R #  #  sapply(type, \\(x, invec) as.numeric(grepl(x, invec)), invec = data$type) ## a b - ## [1,] 1 1 0 ## [2,] 0 0 1 ## [3,] 1 0 0 #  sapply(type, \\(x, invec = data$type) as.numeric(grepl(x, invec))) ## a b - ## [1,] 1 1 0 ## [2,] 0 0 1 ## [3,] 1 0 0 #  # pythonR #  #  # R # rshiny sapply(type, \\(x) as.numeric(grepl(x, data$type))) ## a b - ## [1,] 1 1 0 ## [2,] 0 0 1 ## [3,] 1 0 0 # map # mappurrrapply names(type) = type map(type, \\(x, invec = data$type) as.numeric(grepl(x, invec))) %&gt;% as_tibble() ## # A tibble: 3 × 3 ## a b `-` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 0 ## 2 0 0 1 ## 3 1 0 0 map_dfc(type, \\(x, invec = data$type) as.numeric(grepl(x, invec))) ## # A tibble: 3 × 3 ## a b `-` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 0 ## 2 0 0 1 ## 3 1 0 0 # purrr #  #  map_dfc(type, ~ as.numeric(grepl(.x, data$type))) ## # A tibble: 3 × 3 ## a b `-` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 0 ## 2 0 0 1 ## 3 1 0 0 4.2.2 2. tibblenested tibble tibbledataframedf data %&gt;% as_tibble() %&gt;% mutate( y = str_split(type, &quot;, &quot;), y = map(y, ~ set_names(.x, .x))) %&gt;% unnest_wider(y) %&gt;% mutate(across(-type, ~ ifelse(is.na(.x), 0, 1))) ## # A tibble: 3 × 4 ## type a b `-` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a, b 1 1 0 ## 2 - 0 0 1 ## 3 a 1 0 0 4.2.3 3. dataframe tibbletidyrmutate data %&gt;% mutate(id = type, value = 1) %&gt;% separate_rows(type, sep = &quot;, &quot;) %&gt;% pivot_wider(names_from = type, values_from = value, values_fill = 0) ## # A tibble: 3 × 4 ## id a b `-` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a, b 1 1 0 ## 2 - 0 0 1 ## 3 a 1 0 0 4.2.4 4.  type = data$type %&gt;% unique() %&gt;% str_split(&quot;, &quot;) %&gt;% unlist() %&gt;% unique() result = list() for (element in type) { result[[element]] = as.numeric(grepl(element, data$type)) } as.data.frame(result) ## a b X. ## 1 1 1 0 ## 2 0 0 1 ## 3 1 0 0 "],["mlr3.html", "5 mlr3 5.1 mlr3po()", " 5 mlr3 / lrns() #  ## &lt;DictionaryLearner&gt; with 141 stored values ## Keys: classif.abess, classif.AdaBoostM1, classif.bart, classif.C50, ## classif.catboost, classif.cforest, classif.ctree, classif.cv_glmnet, ## classif.debug, classif.earth, classif.featureless, classif.fnn, ## classif.gam, classif.gamboost, classif.gausspr, classif.gbm, ## classif.glmboost, classif.glmer, classif.glmnet, classif.IBk, ## classif.imbalanced_rfsrc, classif.J48, classif.JRip, classif.kknn, ## classif.ksvm, classif.lda, classif.liblinear, classif.lightgbm, ## classif.LMT, classif.log_reg, classif.lssvm, classif.mob, ## classif.multinom, classif.naive_bayes, classif.nnet, classif.OneR, ## classif.PART, classif.priority_lasso, classif.qda, ## classif.randomForest, classif.ranger, classif.rfsrc, classif.rpart, ## classif.svm, classif.xgboost, clust.agnes, clust.ap, clust.cmeans, ## clust.cobweb, clust.dbscan, clust.diana, clust.em, clust.fanny, ## clust.featureless, clust.ff, clust.hclust, clust.kkmeans, ## clust.kmeans, clust.MBatchKMeans, clust.mclust, clust.meanshift, ## clust.pam, clust.SimpleKMeans, clust.xmeans, dens.kde_ks, ## dens.locfit, dens.logspline, dens.mixed, dens.nonpar, dens.pen, ## dens.plug, dens.spline, regr.abess, regr.bart, regr.catboost, ## regr.catboost_modified, regr.cforest, regr.ctree, regr.cubist, ## regr.cv_glmnet, regr.debug, regr.earth, regr.featureless, regr.fnn, ## regr.gam, regr.gamboost, regr.gausspr, regr.gbm, regr.glm, ## regr.glmboost, regr.glmnet, regr.IBk, regr.kknn, regr.km, regr.ksvm, ## regr.liblinear, regr.lightgbm, regr.lm, regr.lmer, regr.M5Rules, ## regr.mars, regr.mob, regr.nnet, regr.priority_lasso, ## regr.randomForest, regr.ranger, regr.rfsrc, regr.rpart, regr.rsm, ## regr.rvm, regr.svm, regr.xgboost, surv.akritas, surv.aorsf, ## surv.blackboost, surv.cforest, surv.coxboost, surv.coxtime, ## surv.ctree, surv.cv_coxboost, surv.cv_glmnet, surv.deephit, ## surv.deepsurv, surv.dnnsurv, surv.flexible, surv.gamboost, surv.gbm, ## surv.glmboost, surv.glmnet, surv.loghaz, surv.mboost, surv.nelson, ## surv.obliqueRSF, surv.parametric, surv.pchazard, surv.penalized, ## surv.priority_lasso, surv.ranger, surv.rfsrc, surv.svm, surv.xgboost lrn_c_ranger = lrn(&quot;classif.ranger&quot;) #   lrn_r_ranger = lrn(&quot;regr.ranger&quot;) #   tsks() #  ## &lt;DictionaryTask&gt; with 21 stored values ## Keys: ames_housing, bike_sharing, boston_housing, breast_cancer, ## german_credit, ilpd, iris, kc_housing, moneyball, mtcars, optdigits, ## penguins, penguins_simple, pima, ruspini, sonar, spam, titanic, ## usarrests, wine, zoo tsk_c = tsk(&quot;titanic&quot;) #  tsk_r = tsk(&quot;boston_housing&quot;) #  tsk_c$missings() ## survived age cabin embarked fare name parch pclass ## 418 263 1014 2 1 0 0 0 ## sex sib_sp ticket ## 0 0 0 tsk_r$missings() ## cmedv age b chas crim dis indus lat lon lstat ## 0 0 0 0 0 0 0 0 0 0 ## nox ptratio rad rm tax town tract zn ## 0 0 0 0 0 0 0 0 tsk_c$data() |&gt; View() mlr3R6R6 #tsk_c$filter(useful_sample)tsk_c = tsk_c$filter(useful_sample) useful_sample = which(!is.na(tsk_c$data()$survived)) #  tsk_c$filter(useful_sample) tsk_c$missings() ## survived age cabin embarked fare name parch pclass ## 0 177 687 2 0 0 0 0 ## sex sib_sp ticket ## 0 0 0 tsk_c$feature_types #  ## id type ## 1: age numeric ## 2: cabin character ## 3: embarked factor ## 4: fare numeric ## 5: name character ## 6: parch integer ## 7: pclass ordered ## 8: sex factor ## 9: sib_sp integer ## 10: ticket character col_not_cha = tsk_c$feature_types$id[tsk_c$feature_types$type != &quot;character&quot;] #  tsk_c$select(col_not_cha) tsk_c$col_info #  ## id type levels label fix_factor_levels ## 1: ..row_id integer &lt;NA&gt; FALSE ## 2: age numeric &lt;NA&gt; FALSE ## 3: cabin character &lt;NA&gt; FALSE ## 4: embarked factor C,Q,S &lt;NA&gt; FALSE ## 5: fare numeric &lt;NA&gt; FALSE ## 6: name character &lt;NA&gt; FALSE ## 7: parch integer &lt;NA&gt; FALSE ## 8: pclass ordered 1,2,3 &lt;NA&gt; FALSE ## 9: sex factor female,male &lt;NA&gt; FALSE ## 10: sib_sp integer &lt;NA&gt; FALSE ## 11: survived factor yes,no &lt;NA&gt; TRUE ## 12: ticket character &lt;NA&gt; FALSE tsk_c$missings() ## survived age embarked fare parch pclass sex sib_sp ## 0 177 2 0 0 0 0 0 # embarked 5.1 mlr3po() preprocess_pipe1 = po(&quot;imputemode&quot;) #  preprocess_pipe1$train(list(tsk_c)) ## $output ## &lt;TaskClassif:titanic&gt; (891 x 8): Titanic ## * Target: survived ## * Properties: twoclass ## * Features (7): ## - dbl (2): age, fare ## - fct (2): embarked, sex ## - int (2): parch, sib_sp ## - ord (1): pclass tsk_c_imputed = preprocess_pipe1$predict(list(tsk_c))[[1]] tsk_c_imputed$missings() #  ## survived fare parch pclass sex sib_sp age embarked ## 0 0 0 0 0 0 0 0 mlr3ppt po %&gt;&gt;%  preprocess_pipe2 = po(&quot;imputemode&quot;) %&gt;&gt;% po(&quot;encode&quot;, method = &quot;one-hot&quot;) preprocess_pipe2$train(tsk_c) ## $encode.output ## &lt;TaskClassif:titanic&gt; (891 x 13): Titanic ## * Target: survived ## * Properties: twoclass ## * Features (12): ## - dbl (10): age, embarked.C, embarked.Q, embarked.S, fare, pclass.1, ## pclass.2, pclass.3, sex.female, sex.male ## - int (2): parch, sib_sp onehot, mlr3polistpo,[[1]] tsk_c_imputed_expanded = preprocess_pipe2$predict(tsk_c)[[1]]  id preprocess_pipe0 = po(&quot;imputelearner&quot;, id = &quot;num&quot;, lrn(&quot;regr.rpart&quot;), affect_columns = selector_type(&quot;numeric&quot;)) %&gt;&gt;% po(&quot;imputelearner&quot;, id = &quot;fct&quot;, lrn(&quot;classif.rpart&quot;), affect_columns = selector_type(&quot;factor&quot;))  split_c = partition(tsk_c_imputed_expanded, ratio = 0.7) split_r = partition(tsk_r, ratio = 0.7) #  split_c$train #  ## [1] 5 6 8 14 17 19 21 25 27 28 30 34 35 36 38 39 41 42 ## [19] 43 46 47 49 52 55 58 60 63 64 65 70 71 74 77 81 84 87 ## [37] 88 90 92 93 94 95 96 101 103 105 109 111 113 115 116 117 118 121 ## [55] 125 127 132 136 138 139 140 145 146 148 149 151 153 154 156 158 159 161 ## [73] 163 164 176 177 178 181 182 183 186 192 198 201 202 203 204 206 211 213 ## [91] 215 218 222 224 226 229 232 233 235 237 239 240 241 244 250 252 253 254 ## [109] 261 263 264 266 267 274 277 278 279 282 283 285 286 293 294 295 297 298 ## [127] 303 305 309 313 315 318 321 322 325 327 333 334 336 337 340 344 350 353 ## [145] 354 355 356 358 362 366 373 374 375 378 380 383 386 387 389 393 396 397 ## [163] 398 399 402 403 404 406 407 410 411 412 414 416 419 422 423 424 426 429 ## [181] 434 435 437 439 442 443 451 452 453 455 457 460 462 463 464 465 466 467 ## [199] 469 472 477 479 486 488 489 491 492 493 494 495 498 500 502 503 504 506 ## [217] 509 512 515 516 518 520 522 523 525 528 529 530 532 533 535 537 539 542 ## [235] 545 546 549 552 553 556 558 561 562 565 566 567 568 575 576 579 587 590 ## [253] 591 593 594 596 599 602 603 604 606 607 612 614 617 624 626 627 630 634 ## [271] 635 639 640 643 647 649 655 656 657 658 659 660 662 663 664 667 668 669 ## [289] 673 675 676 677 679 684 685 686 687 688 689 695 696 697 699 700 703 704 ## [307] 706 712 715 716 719 722 723 724 726 732 734 735 737 739 742 744 746 749 ## [325] 754 758 759 761 765 767 768 769 770 772 776 783 784 785 786 788 790 792 ## [343] 793 794 796 799 800 801 806 807 808 809 811 812 818 819 820 823 825 827 ## [361] 834 835 838 842 844 845 846 848 851 853 855 860 862 864 868 869 871 873 ## [379] 882 883 885 887 889 891 3 4 10 12 16 18 22 23 24 26 29 33 ## [397] 37 40 44 45 48 53 54 56 57 59 75 79 80 82 83 85 86 89 ## [415] 98 107 108 110 124 126 129 137 142 143 147 157 162 167 184 185 187 188 ## [433] 191 193 196 199 205 210 212 216 217 219 227 231 234 248 249 256 257 260 ## [451] 262 268 269 270 272 273 275 276 280 284 289 290 291 292 304 306 311 316 ## [469] 319 324 328 329 330 331 335 338 341 346 347 348 357 359 360 367 369 370 ## [487] 376 377 381 384 390 391 392 395 400 413 415 418 427 428 431 432 433 438 ## [505] 441 444 445 448 450 454 458 459 461 474 490 497 505 507 508 510 513 514 ## [523] 519 521 524 538 540 541 544 547 548 550 551 555 559 560 570 571 572 573 ## [541] 574 578 581 582 586 588 601 605 608 610 616 619 623 628 631 633 636 642 ## [559] 645 646 648 650 652 654 661 670 671 674 678 680 682 691 692 698 701 702 ## [577] 709 710 713 718 725 727 728 741 748 751 756 760 763 766 775 778 780 781 ## [595] 789 797 798 802 803 804 810 822 824 828 830 831 832 836 839 840 843 850 ## [613] 854 856 857 858 866 867 870 872 875 888 890 clone tsk_c_imputed_expanded$set_row_roles(split_c$test, roles = &quot;test&quot;) #  tsk_r_train = tsk_r$clone(deep = T)$filter(split_r$train) tsk_r_test = tsk_r$clone(deep = T)$filter(split_r$test)  lrn_c_ranger$train(tsk_c_imputed_expanded, row_ids = split_c$train) lrn_c_ranger$predict(tsk_c_imputed_expanded, row_ids = split_c$test) ## &lt;PredictionClassif&gt; for 268 observations: ## row_ids truth response ## 1 no no ## 7 no no ## 13 no no ## --- ## 876 yes yes ## 880 yes yes ## 881 yes yes lrn_r_ranger$train(tsk_r_train) lrn_r_ranger$predict(tsk_r_test) ## &lt;PredictionRegr&gt; for 152 observations: ## row_ids truth response ## 4 33.4 35.23649 ## 9 16.5 16.96422 ## 15 18.2 19.69856 ## --- ## 495 24.5 20.34244 ## 496 23.1 19.02360 ## 504 23.9 28.54684 predictionmlr3 predicition_c = lrn_c_ranger$predict(tsk_c_imputed_expanded, row_ids = split_c$test) predicition_r = lrn_r_ranger$predict(tsk_r_test) scorescoremsrs() predicition_c$score() ## classif.ce ## 0.1865672 predicition_c$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.8134328 "],[".html", "6  6.1  6.2 hardmax 6.3 softmax 6.4 ", " 6  data = as_tibble(iris) data_no_setosa = filter(data, Species != &quot;setosa&quot;) data_no_versicolor = filter(data, Species != &quot;versicolor&quot;) data_no_virginica = filter(data, Species != &quot;virginica&quot;) 6.1  two_class = function(data) { model = glm(Species ~ ., data = data, family = binomial()) predict(model, newdata = data[, -5], type = &quot;response&quot;) } two_class(data_no_setosa) ## 1 2 3 4 5 6 ## 1.171672e-05 4.856237e-05 1.198626e-03 4.220049e-05 1.408470e-03 1.018578e-04 ## 7 8 9 10 11 12 ## 1.305727e-03 5.351876e-10 1.458241e-05 1.481064e-05 3.990780e-08 3.744346e-05 ## 13 14 15 16 17 18 ## 9.947107e-08 7.988665e-04 1.378280e-08 2.828836e-06 1.326003e-03 1.481153e-08 ## 19 20 21 22 23 24 ## 5.959820e-02 8.712675e-08 4.048381e-01 3.405812e-07 2.248338e-01 4.023809e-05 ## 25 26 27 28 29 30 ## 1.410660e-06 7.060188e-06 7.124099e-04 2.760617e-01 9.651525e-04 1.290424e-10 ## 31 32 33 34 35 36 ## 8.469327e-08 5.298820e-09 8.707382e-08 8.676299e-01 2.169221e-03 2.129823e-04 ## 37 38 39 40 41 42 ## 2.979719e-04 2.551360e-04 7.884147e-07 1.109268e-05 3.969831e-05 1.596216e-04 ## 43 44 45 46 47 48 ## 4.360614e-07 8.158121e-10 1.502115e-05 2.541253e-07 3.085679e-06 2.309662e-06 ## 49 50 51 52 53 54 ## 6.163826e-11 2.344150e-06 1.000000e+00 9.996139e-01 9.999990e-01 9.997188e-01 ## 55 56 57 58 59 60 ## 9.999999e-01 1.000000e+00 8.908123e-01 9.999955e-01 9.999921e-01 1.000000e+00 ## 61 62 63 64 65 66 ## 9.902584e-01 9.997429e-01 9.999800e-01 9.999673e-01 9.999999e-01 9.999952e-01 ## 67 68 69 70 71 72 ## 9.976994e-01 9.999999e-01 1.000000e+00 9.204923e-01 9.999996e-01 9.995130e-01 ## 73 74 75 76 77 78 ## 1.000000e+00 9.484339e-01 9.999824e-01 9.995586e-01 8.245440e-01 8.022990e-01 ## 79 80 81 82 83 84 ## 9.999992e-01 9.712013e-01 9.999969e-01 9.999189e-01 9.999999e-01 2.048741e-01 ## 85 86 87 88 89 90 ## 9.664047e-01 1.000000e+00 9.999999e-01 9.964973e-01 6.691425e-01 9.998717e-01 ## 91 92 93 94 95 96 ## 1.000000e+00 9.999440e-01 9.996139e-01 1.000000e+00 1.000000e+00 9.999932e-01 ## 97 98 99 100 ## 9.991067e-01 9.989939e-01 9.999956e-01 9.776789e-01 010.5  cross_entropy = function (truth, response) { # truth01 - mean(truth * log(response) + (1-truth) * log(1-response)) } cross_entropy(as.numeric(data_no_setosa$Species)-2, two_class(data_no_setosa)) ## [1] 0.05949273 nn data_is_setosa = mutate(data, Species = ifelse(Species == &quot;setosa&quot;, 0, 1)) data_is_versicolor = mutate(data, Species = ifelse(Species == &quot;versicolor&quot;, 0, 1)) data_is_virginica = mutate(data, Species = ifelse(Species == &quot;virginica&quot;, 0, 1)) two_class(data_is_setosa) ## Warning: glm.fit: algorithm did not converge ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## 1 2 3 4 5 6 ## 2.220446e-16 2.220446e-16 2.220446e-16 1.875686e-12 2.220446e-16 2.220446e-16 ## 7 8 9 10 11 12 ## 2.077262e-13 2.220446e-16 1.268389e-11 2.220446e-16 2.220446e-16 1.266230e-13 ## 13 14 15 16 17 18 ## 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 ## 19 20 21 22 23 24 ## 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 3.968396e-11 ## 25 26 27 28 29 30 ## 5.245006e-11 2.775502e-13 9.076879e-13 2.220446e-16 2.220446e-16 1.969335e-12 ## 31 32 33 34 35 36 ## 1.331002e-12 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 ## 37 38 39 40 41 42 ## 2.220446e-16 2.220446e-16 7.767584e-13 2.220446e-16 2.220446e-16 5.033679e-10 ## 43 44 45 46 47 48 ## 1.618733e-13 3.120309e-11 5.037930e-12 4.553236e-13 2.220446e-16 1.148666e-13 ## 49 50 51 52 53 54 ## 2.220446e-16 2.220446e-16 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 55 56 57 58 59 60 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 61 62 63 64 65 66 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 67 68 69 70 71 72 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 73 74 75 76 77 78 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 79 80 81 82 83 84 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 85 86 87 88 89 90 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 91 92 93 94 95 96 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 97 98 99 100 101 102 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 103 104 105 106 107 108 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 109 110 111 112 113 114 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 115 116 117 118 119 120 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 121 122 123 124 125 126 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 127 128 129 130 131 132 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 133 134 135 136 137 138 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 139 140 141 142 143 144 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 145 146 147 148 149 150 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 two_class(data_is_versicolor) ## 1 2 3 4 5 6 7 ## 0.91508678 0.71708213 0.82801733 0.73198542 0.93292480 0.97659676 0.90489939 ## 8 9 10 11 12 13 14 ## 0.87455330 0.62894618 0.69007968 0.94679577 0.85338449 0.65195952 0.71076006 ## 15 16 17 18 19 20 21 ## 0.98537301 0.99578893 0.98602837 0.93433221 0.96257651 0.96652246 0.85535651 ## 22 23 24 25 26 27 28 ## 0.96646344 0.95520481 0.90529428 0.79694417 0.66637629 0.91420835 0.90640934 ## 29 30 31 32 33 34 35 ## 0.89304874 0.76450653 0.71553621 0.93058069 0.97517261 0.98826215 0.74617711 ## 36 37 38 39 40 41 42 ## 0.85527797 0.93130409 0.91134267 0.71884097 0.87722046 0.94059041 0.32816243 ## 43 44 45 46 47 48 49 ## 0.81728097 0.96088927 0.95751567 0.76554646 0.95043481 0.80466977 0.94554618 ## 50 51 52 53 54 55 56 ## 0.85736072 0.73176309 0.80169711 0.67139461 0.22449792 0.54276509 0.38957228 ## 57 58 59 60 61 62 63 ## 0.84119709 0.26480262 0.48001142 0.55343880 0.08486774 0.75194940 0.09707761 ## 64 65 66 67 68 69 70 ## 0.48595238 0.72874996 0.73970106 0.65505546 0.26653438 0.19020107 0.25348721 ## 71 72 73 74 75 76 77 ## 0.84731131 0.57587291 0.24774872 0.29079401 0.56587107 0.67704460 0.42666361 ## 78 79 80 81 82 83 84 ## 0.69212565 0.61297198 0.37091722 0.22219378 0.19791172 0.45168126 0.35209499 ## 85 86 87 88 89 90 91 ## 0.64388465 0.89434765 0.71670119 0.17238522 0.64819734 0.33618752 0.23077053 ## 92 93 94 95 96 97 98 ## 0.58778493 0.35322319 0.21818490 0.41115082 0.55637471 0.55592485 0.55377949 ## 99 100 101 102 103 104 105 ## 0.49487549 0.51907745 0.92128497 0.54353665 0.69789142 0.48049108 0.75012175 ## 106 107 108 109 110 111 112 ## 0.51009989 0.40780938 0.32032711 0.20403096 0.96733885 0.88313482 0.51476423 ## 113 114 115 116 117 118 119 ## 0.78399944 0.49998454 0.86335239 0.92881951 0.59435952 0.92046379 0.29067444 ## 120 121 122 123 124 125 126 ## 0.10390241 0.89714680 0.72025710 0.28831708 0.57007603 0.86304725 0.61212629 ## 127 128 129 130 131 132 133 ## 0.66120010 0.74498856 0.62253140 0.40227498 0.38536752 0.91182791 0.68527934 ## 134 135 136 137 138 139 140 ## 0.36948806 0.11130750 0.78201219 0.95199319 0.65410628 0.76474800 0.84873120 ## 141 142 143 144 145 146 147 ## 0.90433846 0.93550181 0.54353665 0.86745626 0.95036600 0.90153107 0.46737587 ## 148 149 150 ## 0.79113474 0.95014869 0.68141028 two_class(data_is_virginica) ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## 1 2 3 4 5 6 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 7 8 9 10 11 12 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 13 14 15 16 17 18 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 19 20 21 22 23 24 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 25 26 27 28 29 30 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 31 32 33 34 35 36 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 37 38 39 40 41 42 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 43 44 45 46 47 48 ## 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 ## 49 50 51 52 53 54 ## 1.000000e+00 1.000000e+00 9.999883e-01 9.999514e-01 9.988014e-01 9.999578e-01 ## 55 56 57 58 59 60 ## 9.985915e-01 9.998981e-01 9.986943e-01 1.000000e+00 9.999854e-01 9.999852e-01 ## 61 62 63 64 65 66 ## 1.000000e+00 9.999626e-01 9.999999e-01 9.992011e-01 1.000000e+00 9.999972e-01 ## 67 68 69 70 71 72 ## 9.986740e-01 1.000000e+00 9.404018e-01 9.999999e-01 5.951619e-01 9.999997e-01 ## 73 74 75 76 77 78 ## 7.751662e-01 9.999598e-01 9.999986e-01 9.999929e-01 9.992876e-01 7.239383e-01 ## 79 80 81 82 83 84 ## 9.990348e-01 1.000000e+00 9.999999e-01 1.000000e+00 9.999999e-01 1.323701e-01 ## 85 86 87 88 89 90 ## 9.978308e-01 9.997870e-01 9.997020e-01 9.997449e-01 9.999992e-01 9.999889e-01 ## 91 92 93 94 95 96 ## 9.999603e-01 9.998404e-01 9.999996e-01 1.000000e+00 9.999850e-01 9.999997e-01 ## 97 98 99 100 101 102 ## 9.999969e-01 9.999977e-01 1.000000e+00 9.999977e-01 2.585234e-10 3.860921e-04 ## 103 104 105 106 107 108 ## 9.653910e-07 2.811503e-04 9.071537e-08 4.502238e-09 1.091877e-01 4.498827e-06 ## 109 110 111 112 113 114 ## 7.901235e-06 6.870636e-09 9.741562e-03 2.570987e-04 2.002431e-05 3.272223e-05 ## 115 116 117 118 119 120 ## 8.057896e-08 4.834130e-06 2.300631e-03 7.550917e-08 6.068062e-13 7.950771e-02 ## 121 122 123 124 125 126 ## 3.815786e-07 4.870092e-04 3.671479e-09 5.156610e-02 1.761615e-05 4.413947e-04 ## 127 128 129 130 131 132 ## 1.754560e-01 1.977010e-01 7.647259e-07 2.879872e-02 3.125252e-06 8.108555e-05 ## 133 134 135 136 137 138 ## 1.228427e-07 7.951259e-01 3.359534e-02 1.658605e-08 1.364130e-07 3.502736e-03 ## 139 140 141 142 143 144 ## 3.308575e-01 1.283021e-04 4.927955e-08 5.603902e-05 3.860921e-04 4.523713e-08 ## 145 146 147 148 149 150 ## 1.172982e-08 6.834793e-06 8.933153e-04 1.006087e-03 4.374956e-06 2.232115e-02 hardmaxsoftmaxsoftmaxsoftmaxsoftmaxsoftmaxhardmax 6.2 hardmax result_hardmax = tibble( is_setosa = two_class(data_is_setosa), is_versicolor = two_class(data_is_versicolor), is_virginica = two_class(data_is_virginica) ) %&gt;% mutate( # pmap which = pmap_dbl(., ~ which.min(c(...))), prob = pmap_dbl(., ~ c(...)[which.min(c(...))]) ) ## Warning: glm.fit: algorithm did not converge ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred 6.3 softmax softmax = function(value, values) { exp(value) / sum(exp(values)) } result_softmax = tibble( is_setosa = two_class(data_is_setosa), is_versicolor = two_class(data_is_versicolor), is_virginica = two_class(data_is_virginica) ) %&gt;% mutate( is_setosa_so = pmap_dbl(., ~ softmax(..1, c(..1, ..2, ..3))), is_versicolor_so = pmap_dbl(., ~ softmax(..2, c(..1, ..2, ..3))), is_virginica_so = pmap_dbl(., ~ softmax(..3, c(..1, ..2, ..3))) ) %&gt;% select(contains(&quot;so&quot;)) %&gt;% mutate( which = pmap_dbl(., ~ which.min(c(...))), prob = pmap_dbl(., ~ c(...)[which.min(c(...))]) ) ## Warning: glm.fit: algorithm did not converge ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  log_likelihood = function (truth, response) { -log(sum(truth * response)) }  truth = list(c(1, 0), c(0, 1)) response = list(c(0.9, 0.1), c(0.2, 0.8)) mean(map2_dbl(truth, response, log_likelihood)) ## [1] 0.164252  truth = c(1, 0) response = c(0.9, 0.2) cross_entropy(truth, response) ## [1] 0.164252 6.4  truth = list(c(1, 0, 0), c(0, 1, 0)) response = list(c(0.85, 0.1, 0.05), c(0.15, 0.8, 0.05)) mean(map2_dbl(truth, response, log_likelihood)) ## [1] 0.1928312 "],[".html", "7  7.1  7.2  7.3 ", " 7  7.1   7.1.1  playgroundpgtt data_pg_train_raw = read_csv(&quot;../playground-regression/data/train.csv&quot;) data_pg_test_raw = read_csv(&quot;../playground-regression/data/test.csv&quot;) data_tt_train_raw = read_csv(&quot;../twoclass/data/train.csv&quot;) data_tt_test_raw = read_csv(&quot;../twoclass/data/test.csv&quot;) data_tt_test_leak = read_csv(&quot;../twoclass/data/titanic.csv&quot;)  data_tt_test_raw = data_tt_test_raw %&gt;% mutate(Name = str_replace(Name, &quot;\\&quot;&quot;, &quot;&quot;)) %&gt;% mutate(Name = str_replace(Name, &quot;\\\\\\&quot;&quot;, &quot;&quot;)) data_tt_test_leak = data_tt_test_leak %&gt;% mutate(name = str_replace(name, &quot;\\&quot;&quot;, &quot;&quot;)) %&gt;% mutate(name = str_replace(name, &quot;\\\\\\&quot;&quot;, &quot;&quot;)) data_tt_test_raw = inner_join(data_tt_test_raw, select(data_tt_test_leak, survived, name), by = c(&quot;Name&quot; = &quot;name&quot;)) %&gt;% rename(Survived = survived) %&gt;% distinct(Name, .keep_all = T) # load(&quot;./data/example6.Rdata&quot;) 7.1.2  pgmlr3 Task$new() task_pg_train = as_task_regr(data_pg_train_raw[, -1], target = &quot;target&quot;) task_pg_test = as_task_regr(mutate(data_pg_test_raw[, -1], target = 1), target = &quot;target&quot;) tt rmice ## PassengerId Survived Pclass Name Sex Age ## 0 0 0 0 0 177 ## SibSp Parch Ticket Fare Cabin Embarked ## 0 0 0 0 687 2 nameCabinIDEmbarkedplural_names data_train_mediated1 = data_tt_train_raw %&gt;% mutate(Family = str_extract(Name, &quot;^[^,]+&quot;), Appellation = str_sub(str_extract(Name, &quot;,\\\\s(\\\\w+)(?=\\\\.)&quot;), start = 3), Seat = str_sub(Cabin, end = 1)) a = table(data_train_mediated1$Family) plural_names = names(a)[a != 1] b = table(data_train_mediated1$Appellation) TitleDict = c(Mr = &quot;Mr&quot;, Mlle = &quot;Miss&quot;, Miss = &quot;Miss&quot;, Master = &quot;Master&quot;, Jonkheer = &quot;Master&quot;, Mme = &quot;Mrs&quot;, Ms = &quot;Mrs&quot;, Mrs = &quot;Mrs&quot;, Don = &quot;Master&quot;, Sir = &quot;Master&quot;, Lady = &quot;Miss&quot;, Capt = &quot;Officer&quot;, Col = &quot;Officer&quot;, Major = &quot;Officer&quot;, Dr = &quot;Officer&quot;, Rev = &quot;Officer&quot;) Seats = LETTERS[1:7] lst_par = list(plural_names, TitleDict, Seats) preprocess = function (pars, data_raw) { judge = &quot;Survived&quot; %in% colnames(data_raw) if (judge) { data_raw %&gt;% mutate(Name = str_replace(Name, &quot;\\&quot;&quot;, &quot;&quot;)) %&gt;% mutate(Name = str_replace(Name, &quot;\\\\\\&quot;&quot;, &quot;&quot;)) %&gt;% mutate(Family = str_extract(Name, &quot;^[^,]+&quot;), Appellation = str_sub(str_extract(Name, &quot;,\\\\s(\\\\w+)(?=\\\\.)&quot;), start = 3), Seat = str_sub(Cabin, end = 1)) %&gt;% select(-Name, -Cabin, -PassengerId, -Ticket) %&gt;% mutate(Seat = ifelse(Seat %in% lst_par[[3]], Seat, &quot;Unknown&quot;), # Family = ifelse(Family %in% lst_par[[1]], &quot;pairs&quot;, &quot;Single&quot;), Appellation = lst_par[[2]][Appellation], across(where(is.character), factor), Sex = as.integer(Sex) - 1) %&gt;% select(-Family, -Embarked) } else { data_raw %&gt;% mutate(Name = str_replace(Name, &quot;\\&quot;&quot;, &quot;&quot;)) %&gt;% mutate(Name = str_replace(Name, &quot;\\\\\\&quot;&quot;, &quot;&quot;)) %&gt;% mutate(Family = str_extract(Name, &quot;^[^,]+&quot;), Appellation = str_sub(str_extract(Name, &quot;,\\\\s(\\\\w+)(?=\\\\.)&quot;), start = 3), Seat = str_sub(Cabin, end = 1)) %&gt;% select(-Name, -Cabin, -PassengerId, -Ticket) %&gt;% mutate(Seat = ifelse(Seat %in% lst_par[[3]], Seat, &quot;Unknown&quot;), # Family = ifelse(Family %in% lst_par[[1]], &quot;pairs&quot;, &quot;Single&quot;), Appellation = lst_par[[2]][Appellation], across(where(is.character), factor), Sex = as.integer(Sex) - 1) %&gt;% select(-Family, -Embarked) %&gt;% mutate(Survived = c(rep(0, nrow(.)-1), 1)) } } data_tt_train = preprocess(lst_par, data_tt_train_raw) data_tt_test = preprocess(lst_par, data_tt_test_raw) task_tt_train_raw = as_task_classif(data_tt_train, target = &quot;Survived&quot;) task_tt_test_raw = as_task_classif(data_tt_test, target = &quot;Survived&quot;)  0.5   preprocess_pipe = po(&quot;imputelearner&quot;, id = &quot;num&quot;, lrn(&quot;regr.lightgbm&quot;), affect_columns = selector_type(&quot;numeric&quot;)) %&gt;&gt;% po(&quot;imputelearner&quot;, id = &quot;fct&quot;, lrn(&quot;classif.rpart&quot;), affect_columns = selector_type(&quot;factor&quot;)) %&gt;&gt;% po(&quot;encode&quot;, method = &quot;one-hot&quot;) up_sp = po(&quot;classbalancing&quot;, reference = &quot;minor&quot;, adjust = &quot;major&quot;) preprocess_pipe$train(task_tt_train_raw) ## $encode.output ## &lt;TaskClassif:data_tt_train&gt; (891 x 21) ## * Target: Survived ## * Properties: twoclass ## * Features (20): ## - dbl (20): Age, Appellation.Master, Appellation.Miss, ## Appellation.Mr, Appellation.Mrs, Appellation.Officer, ## Appellation.factor, Fare, Parch, Pclass, Seat.A, Seat.B, Seat.C, ## Seat.D, Seat.E, Seat.F, Seat.G, Seat.Unknown, Sex, SibSp task_tt_train_nob = preprocess_pipe$predict(task_tt_train_raw)[[1]] task_tt_train = up_sp$train(list(preprocess_pipe$predict(task_tt_train_raw)[[1]]))[[1]] task_tt_test = preprocess_pipe$predict(task_tt_test_raw)[[1]]  toylrn_r = lrn(&quot;regr.lightgbm&quot;) # lightgbm toylrn_r$train(task_pg_train) toypre_r = toylrn_r$predict(task_pg_test) toylrn_c = lrn(&quot;classif.lightgbm&quot;) toylrn_c$train(task_tt_train) toypre_c = toylrn_c$predict(task_tt_test)  summary_of = function(pre, is_titanic = F) { if (is_titanic) { tibble( PassengerId = data_tt_test_raw$PassengerId, Survived = pre$response ) } else { tibble( id = data_pg_test_raw$id, target = pre$response ) } } write_csv(summary_of(toypre_r), &quot;temp/submission.csv&quot;) playground0.7031 toypre_c$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7296651  7.2     knnk 7.1:      hyperband     7.2.1 mlr3 mlr3to_tune()ti()instancetnr()  learner_lgb_r = lrn(&quot;regr.lightgbm&quot;) learner_lgb_r$param_set$set_values( learning_rate = to_tune(0.001, 0.1), num_iterations = to_tune(p_int(256, 1024, tags = &quot;budget&quot;)), max_depth = to_tune(1, 10), num_leaves = to_tune(5, 53), bagging_fraction = to_tune(0.75, 1) ) tnrauto_tuner xgboostmlr3mlr3tuningspacelts() learner_xgb_r = lts(lrn(&quot;regr.xgboost&quot;))   # learner_lgb_r = lrn(&quot;regr.lightgbm&quot;) # learner_lgb_r$param_set$set_values( # learning_rate = to_tune(0.001, 0.1), # num_iterations = to_tune(p_int(256, 1024, tags = &quot;budget&quot;)), # max_depth = to_tune(1, 10), # num_leaves = to_tune(5, 53), # bagging_fraction = to_tune(0.75, 1) # ) # # instance = ti( # task = task_pg_train, # learner = learner_lgb_r, # resampling = rsmp(&quot;holdout&quot;), # measures = msr(&quot;regr.rmse&quot;), # terminator = trm(&quot;evals&quot;, n_evals = 50) # ) # # tuner = tnr(&quot;hyperband&quot;, eta = 2, repetitions = 2) # tuner$optimize(instance) learner_lgb_r = lrn(&quot;regr.lightgbm&quot;) #  learner_lgb_r$param_set$set_values( learning_rate = 0.0539276, num_iterations = 256, max_depth = 3, num_leaves = 5, bagging_fraction = 0.82 ) learner_lgb_r$train(task_pg_train) prediction_lgb_r = learner_lgb_r$predict(task_pg_test) write_csv(summary_of(prediction_lgb_r), &quot;temp/submission.csv&quot;) 0.6994  learner_lgb_c = lrn(&quot;classif.lightgbm&quot;) learner_lgb_c$param_set$set_values( learning_rate = to_tune(0.001, 0.1), num_iterations = to_tune(p_int(256, 1024, tags = &quot;budget&quot;)), max_depth = to_tune(1, 10), num_leaves = to_tune(5, 53), bagging_fraction = to_tune(0.75, 1) # early_stopping = TRUE, # early_stopping_rounds = to_tune(128, 256) ) instance = ti( task = task_tt_train, learner = learner_lgb_c, resampling = rsmp(&quot;holdout&quot;), measures = msr(&quot;classif.acc&quot;), terminator = trm(&quot;evals&quot;, n_evals = 20) ) tuner = tnr(&quot;mbo&quot;) #  tuner$optimize(instance) learner_lgb_c$param_set$values = instance$result_learner_param_vals learner_lgb_c$train(task_tt_train) prediction_lgb_c = learner_lgb_c$predict(task_tt_test) prediction_lgb_c$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7416268  cv5_lgb_c = resample(task_tt_train, toylrn_c, rsmp(&quot;cv&quot;, folds = 5)) cv5_lgb_c_tuned = resample(task_tt_train, learner_lgb_c, rsmp(&quot;cv&quot;, folds = 5)) cv5_lgb_c$aggregate(msr(&quot;classif.acc&quot;)); cv5_lgb_c_tuned$aggregate(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7996458 ## classif.acc ## 0.8026191  7.2.2  7.2.2.1 hyperband hyperbandbudgetGBDT 7.2.2.2 early stop   lrn(&quot;classif.rpart&quot;)$train(task_tt_train)$predict(task_tt_test)$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7368421 lrn(&quot;classif.rpart&quot;)$train(task_tt_train_nob)$predict(task_tt_test)$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.777512 learner_rpart_c = lts(lrn(&quot;classif.rpart&quot;)) instance = ti( task = task_tt_train_nob, learner = learner_rpart_c, resampling = rsmp(&quot;holdout&quot;), measures = msr(&quot;classif.acc&quot;), terminator = trm(&quot;evals&quot;, n_evals = 20) ) tuner = tnr(&quot;grid_search&quot;) tuner$optimize(instance) learner_rpart_c$param_set$values = instance$result_learner_param_vals learner_rpart_c$train(task_tt_train_nob)  learner_rpart_c$predict(task_tt_test)$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7631579  lrn(&quot;classif.lightgbm&quot;)$train(task_tt_train_nob)$predict(task_tt_test)$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7440191   GBDT  split = partition(task_tt_train_nob) task_tt_train_nob_e = task_tt_train_nob$clone(deep = T)$set_row_roles(split$test, &quot;test&quot;) learner_lgb_c = lrn(&quot;classif.lightgbm&quot;) learner_lgb_c$param_set$set_values( early_stopping = TRUE, early_stopping_rounds = 128 ) pre_test = learner_lgb_c$train(task_tt_train_nob_e)$predict(task_tt_test) pre_test$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.784689   #  pre_train = learner_lgb_c$train(task_tt_train_nob_e)$predict(task_tt_train_nob_e) # optimize # accacc to_optim = function(pre_train, num) { pre_train$set_threshold(num) -pre_train$score(msr(&quot;classif.acc&quot;)) } for_thres = function(pre_train) { thres = optimize(\\(x) to_optim(pre_train, x), lower = 0, upper = 1)$minimum cat(&quot;before: &quot;, pre_train$set_threshold(0.5)$score(msr(&quot;classif.acc&quot;)), &quot;\\n&quot;, &quot;after: &quot;, pre_train$set_threshold(thres)$score(msr(&quot;classif.acc&quot;))) thres } thres = for_thres(pre_train) ## before: 0.8710218 ## after: 0.879397 #  pre_test$set_threshold(thres)$score(msr(&quot;classif.acc&quot;)) ## classif.acc ## 0.7799043 7.3  kkk-1kk resamplersmpplayground 7.3.1  stackbaseline0.1%1% stack  load(&quot;./data/hps.Rdata&quot;) learner_xgb_r = lrn(&quot;regr.xgboost&quot;); learner_xgb_r$param_set$values = hp_xgb learner_lgb_r = lrn(&quot;regr.lightgbm&quot;); learner_lgb_r$param_set$values = hp_lgb learner_ctb_r = lrn(&quot;regr.catboost&quot;); learner_ctb_r$param_set$values = hp_ctb #  # learner_cv3 gstack_test = gunion(list( po(&quot;learner_cv&quot;, learner_xgb_r, id = &quot;xgb&quot;), po(&quot;learner_cv&quot;, learner_lgb_r, id = &quot;lgb&quot;), po(&quot;learner_cv&quot;, learner_ctb_r, id = &quot;ctb&quot;))) %&gt;&gt;% po(&quot;featureunion&quot;) resampled_1 = gstack_test$train(task_pg_train)[[1]] # task cv5_lgb = resample(task_pg_train, learner_lgb_r, rsmp(&quot;cv&quot;, folds = 5)) #  resampled_lgb_2 = cv5_lgb$prediction() # prediction  learner_base = lrn(&quot;regr.glmnet&quot;, alpha = 0) search_space = ps( s = p_dbl(lower = 0.001, upper = 2) ) at = auto_tuner( tuner = tnr(&quot;grid_search&quot;), learner = learner_base, resampling = rsmp(&quot;cv&quot;, folds = 5), measure = msr(&quot;regr.rmse&quot;), search_space = search_space, terminator = trm(&quot;evals&quot;, n_evals = 50) ) at$train(resampled_1) hp_base = at$tuning_result$learner_param_vals[[1]] learner_base$param_set$values = hp_base # popolearner glearner = gunion(list( po(&quot;learner_cv&quot;, learner_xgb_r, id = &quot;xgb&quot;), po(&quot;learner_cv&quot;, learner_lgb_r, id = &quot;lgb&quot;), po(&quot;learner_cv&quot;, learner_ctb_r, id = &quot;ctb&quot;))) %&gt;&gt;% po(&quot;featureunion&quot;) %&gt;&gt;% learner_base %&gt;% as_learner() #  cv_stack = resample(task_pg_train, glearner, rsmp(&quot;cv&quot;, folds = 5)) cv_stack$aggregate() cv0.696cv 7.3.2     cv lightgbmcv "],[".html", "8  8.1 data_prepare 8.2 model 8.3 rough edged", " 8  8.1 data_prepare mu = rep(0, 2) Sigma1 = matrix(0.7, nrow=2, ncol=2) + diag(2) * 0.3 Sigma2 = matrix(0.5, nrow=2, ncol=2) + diag(2) * 0.5 mat1 = mvrnorm(n = 1000, mu = mu, Sigma = Sigma1) + matrix(rep(c(0, 1), each = 1000), ncol=2) mat2 = mvrnorm(n = 1000, mu = mu, Sigma = Sigma2) + matrix(rep(c(1.5, 0), each = 1000), ncol=2) data_train = rbind(mat1, mat2) %&gt;% as_tibble() %&gt;% mutate(group = factor(rep(c(&quot;G1&quot;, &quot;G2&quot;), each = 1000))) ## Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if ## `.name_repair` is omitted as of tibble 2.0.0. ##  Using compatibility `.name_repair`. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. num = 200 data_train_un = rbind(mat1, mat2[sample(1:1000, num), ]) %&gt;% as_tibble() %&gt;% mutate(group = factor(rep(c(&quot;G1&quot;, &quot;G2&quot;), c(1000, num)))) data_test = rbind( mvrnorm(n = 500, mu = mu, Sigma = Sigma1) + matrix(rep(c(0, 1), each = 500), ncol=2), mvrnorm(n = 500, mu = mu, Sigma = Sigma2) + matrix(rep(c(1.5, 0), each = 500), ncol=2) ) %&gt;% as_tibble() %&gt;% mutate(group = factor(rep(c(&quot;G1&quot;, &quot;G2&quot;), each = 500))) data_train %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) data_train_un %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) 8.2 model 8.2.1  model1 = glm(group ~ ., data = data_train, family = binomial()) # as.matrix(data.frame(V0 = 1, V1 = data_train$V1, V2 = data_train$V2)) %*% coef(model1) coef1 = coef(model1) coef1 ## (Intercept) V1 V2 ## -0.6530901 3.4637531 -3.1321564 beta0 = coef1[1] beta1 = coef1[2] beta2 = coef1[3] data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) 8.2.2  model2 = glm(group ~ ., data = data_train_un, family = binomial()) coef2 = coef(model2) coef2 ## (Intercept) V1 V2 ## -2.377790 3.458357 -2.936726 beta0 = coef2[1] beta1 = coef2[2] beta2 = coef2[3] data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) coef1; coef2 ## (Intercept) V1 V2 ## -0.6530901 3.4637531 -3.1321564 ## (Intercept) V1 V2 ## -2.377790 3.458357 -2.936726 8.2.3  model2 = glm(group ~ ., data = data_train_un, family = binomial()) coef2 = coef(model2) coef2 ## (Intercept) V1 V2 ## -2.377790 3.458357 -2.936726 beta0 = coef2[1] beta1 = coef2[2] beta2 = coef2[3] logit = function(x) exp(x) / (exp(x) + 1) logit_inverse = function(y) log(y) - log(1-y) acc = function(truth, response) sum(truth - response == 0)/length(truth) decide = function(response, thres=0.5) ifelse(response &gt; thres, 1, 0) # acc(as.numeric(data_train_un$group) - 1, decide(logit(predict(model, data_train_un)))) post = optimize(\\(x) -acc(as.numeric(data_train_un$group) - 1, decide(logit(predict(model2, data_train_un)), thres=x)), lower = 0, upper = 1) Z = post$minimum post ## $minimum ## [1] 0.5305961 ## ## $objective ## [1] -0.9608333 data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = Z/beta2 - beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) 8.2.4  model2 = glm(group ~ ., data = data_train_un, family = binomial()) coef2 = coef(model2) coef2 ## (Intercept) V1 V2 ## -2.377790 3.458357 -2.936726 beta0 = coef2[1] beta1 = coef2[2] beta2 = coef2[3] post = optimize(\\(x) -acc(as.numeric(data_test$group) - 1, decide(logit(predict(model2, data_test)), thres=x)), lower = 0, upper = 1) Z = post$minimum post ## $minimum ## [1] 0.2293371 ## ## $objective ## [1] -0.909 data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = Z/beta2 - beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) 8.2.5  up_sample = function(tb, index) tb[c(1:1000, sample(index, 1000, replace = T)), ] data_train_un_up = up_sample(data_train_un, 1001:1200) model_up = glm(group ~ ., data = data_train_un_up, family = binomial()) coef2 = coef(model_up) beta0 = coef2[1] beta1 = coef2[2] beta2 = coef2[3] data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) 8.2.6  down_sample = function(tb, index) tb[c(1001:1200, sample(index, 200)), ] data_train_un_down = down_sample(data_train_un, 1:1000) model_down = glm(group ~ ., data = data_train_un_down, family = binomial()) coef2 = coef(model_down) beta0 = coef2[1] beta1 = coef2[2] beta2 = coef2[3] data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) 8.2.7  model3 = glm(group ~ ., data = data_train_un, family = binomial(), weights = rep(c(1, 5), c(1000, 200))) coef3 = coef(model3) coef3 ## (Intercept) V1 V2 ## -0.7018305 3.1359096 -2.6647095 beta0 = coef3[1] beta1 = coef3[2] beta2 = coef3[3] data_test %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) library(mlr3verse) ## Loading required package: mlr3 ## Warning: package &#39;mlr3&#39; was built under R version 4.3.2 pre = data.table( row_ids = 1:2000, truth = factor(as.numeric(data_train$group) - 1), response = factor(round(logit(predict(model1, data_train)))), prob.0 = 1-logit(predict(model1, data_train)), prob.1 = logit(predict(model1, data_train)) ) %&gt;% as_prediction_classif() pre$score(msr(&quot;classif.prauc&quot;)) ## classif.prauc ## 0.9766404 8.3 rough edged angle = -30 mat3 = mat1 %*% matrix(c(sin(angle), cos(angle), cos(angle), -sin(angle)), ncol = 2) + matrix(rep(c(0.5, 3.5), each = 1000), ncol=2) mat4 = rbind(mat1, mat3) ind = sample(2000, 1000) data_train_r = rbind(mat4[ind, ], mat2) %&gt;% as_tibble() %&gt;% mutate(group = factor(rep(c(&quot;G1&quot;, &quot;G2&quot;), each = 1000))) num = 200 data_train_r_un = rbind(mat4[ind, ], mat2[sample(1:1000, num), ]) %&gt;% as_tibble() %&gt;% mutate(group = factor(rep(c(&quot;G1&quot;, &quot;G2&quot;), c(1000, num)))) data_test_r = rbind( mat4[-ind, ][sample(1000, 500), ], mvrnorm(n = 500, mu = mu, Sigma = Sigma2) + matrix(rep(c(1.5, 0), each = 500), ncol=2) ) %&gt;% as_tibble() %&gt;% mutate(group = factor(rep(c(&quot;G1&quot;, &quot;G2&quot;), each = 500))) # model_r1 = glm(group ~ ., data = data_train_r, family = binomial()) coef1 = coef(model_r1) coef1 ## (Intercept) V1 V2 ## -0.06661368 2.13031750 -2.58225266 beta0 = coef1[1] beta1 = coef1[2] beta2 = coef1[3] data_test_r %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) ## Warning: Removed 1 rows containing missing values (`geom_point()`). model_r2 = glm(group ~ ., data = data_train_r_un, family = binomial()) coef2 = coef(model_r2) coef2 ## (Intercept) V1 V2 ## -1.411091 1.773981 -2.381293 beta0 = coef2[1] beta1 = coef2[2] beta2 = coef2[3] data_test_r %&gt;% ggplot() + geom_point(aes(V1, V2, color = group, alpha = 0.5)) + geom_abline(intercept = -beta0/beta2, slope = -beta1/beta2, linetype = &quot;dashed&quot;, linewidth = 1) + scale_color_aaas() + xlim(-4, 5) + ylim(-4, 5) + ggtitle(&quot;&quot;) + theme_bw() + theme( legend.position = &quot;top&quot;, plot.title = element_text(hjust = 0.5) ) ## Warning: Removed 1 rows containing missing values (`geom_point()`). "],["r.html", "9 R 9.1 S3 9.2 R6 9.3 S4", " 9 R python100     RS7R6S3S4S3R6S4 9.1 S3 S3RS 9.1.1  Rprintdata.frametibble example_tbl = as_tibble(iris) print(iris[1:10, ]) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa print(example_tbl) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## #  140 more rows withR a = with(sleep, t.test(extra[group == 1], extra[group == 2])) b = t.test(extra ~ group, sleep) c = list(a, b); names(c) = c(&quot;numeric&quot;, &quot;formula&quot;); c ## $numeric ## ## Welch Two Sample t-test ## ## data: extra[group == 1] and extra[group == 2] ## t = -1.8608, df = 17.776, p-value = 0.07939 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.3654832 0.2054832 ## sample estimates: ## mean of x mean of y ## 0.75 2.33 ## ## ## $formula ## ## Welch Two Sample t-test ## ## data: extra by group ## t = -1.8608, df = 17.776, p-value = 0.07939 ## alternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0 ## 95 percent confidence interval: ## -3.3654832 0.2054832 ## sample estimates: ## mean in group 1 mean in group 2 ## 0.75 2.33 RS3S3 + .S3default class list(class(iris), class(example_tbl)) ## [[1]] ## [1] &quot;data.frame&quot; ## ## [[2]] ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; methodsprintprint.data.frameprint.tbl methods(&quot;print&quot;) ## [1] print.acf* ## [2] print.activeConcordance* ## [3] print.AES* ## [4] print.all_vars* ## [5] print.anova* ## [6] print.any_vars* ## [7] print.aov* ## [8] print.aovlist* ## [9] print.ar* ## [10] print.Arima* ## [11] print.arima0* ## [12] print.AsIs ## [13] print.aspell* ## [14] print.aspell_inspect_context* ## [15] print.bibentry* ## [16] print.Bibtex* ## [17] print.browseVignettes* ## [18] print.bslib_breakpoints* ## [19] print.bslib_fragment* ## [20] print.bslib_page* ## [21] print.bslib_showcase_layout* ## [22] print.bslib_value_box_theme* ## [23] print.by ## [24] print.cachem* ## [25] print.changedFiles* ## [26] print.check_bogus_return* ## [27] print.check_code_usage_in_package* ## [28] print.check_compiled_code* ## [29] print.check_demo_index* ## [30] print.check_depdef* ## [31] print.check_details* ## [32] print.check_details_changes* ## [33] print.check_doi_db* ## [34] print.check_dotInternal* ## [35] print.check_make_vars* ## [36] print.check_nonAPI_calls* ## [37] print.check_package_code_assign_to_globalenv* ## [38] print.check_package_code_attach* ## [39] print.check_package_code_data_into_globalenv* ## [40] print.check_package_code_startup_functions* ## [41] print.check_package_code_syntax* ## [42] print.check_package_code_unload_functions* ## [43] print.check_package_compact_datasets* ## [44] print.check_package_CRAN_incoming* ## [45] print.check_package_datalist* ## [46] print.check_package_datasets* ## [47] print.check_package_depends* ## [48] print.check_package_description* ## [49] print.check_package_description_encoding* ## [50] print.check_package_license* ## [51] print.check_packages_in_dir* ## [52] print.check_packages_used* ## [53] print.check_po_files* ## [54] print.check_pragmas* ## [55] print.check_Rd_line_widths* ## [56] print.check_Rd_metadata* ## [57] print.check_Rd_xrefs* ## [58] print.check_RegSym_calls* ## [59] print.check_S3_methods_needing_delayed_registration* ## [60] print.check_so_symbols* ## [61] print.check_T_and_F* ## [62] print.check_url_db* ## [63] print.check_vignette_index* ## [64] print.checkDocFiles* ## [65] print.checkDocStyle* ## [66] print.checkFF* ## [67] print.checkRd* ## [68] print.checkRdContents* ## [69] print.checkReplaceFuns* ## [70] print.checkS3methods* ## [71] print.checkTnF* ## [72] print.checkVignettes* ## [73] print.citation* ## [74] print.cli_ansi_html_style* ## [75] print.cli_ansi_string* ## [76] print.cli_ansi_style* ## [77] print.cli_boxx* ## [78] print.cli_diff_chr* ## [79] print.cli_doc* ## [80] print.cli_progress_demo* ## [81] print.cli_rule* ## [82] print.cli_sitrep* ## [83] print.cli_spark* ## [84] print.cli_spinner* ## [85] print.cli_tree* ## [86] print.codoc* ## [87] print.codocClasses* ## [88] print.codocData* ## [89] print.col_spec* ## [90] print.collector* ## [91] print.colorConverter* ## [92] print.compactPDF* ## [93] print.condition ## [94] print.connection ## [95] print.CRAN_package_reverse_dependencies_and_views* ## [96] print.css* ## [97] print.data.frame ## [98] print.Date ## [99] print.date_names* ## [100] print.default ## [101] print.dendrogram* ## [102] print.density* ## [103] print.difftime ## [104] print.dist* ## [105] print.Dlist ## [106] print.DLLInfo ## [107] print.DLLInfoList ## [108] print.DLLRegisteredRoutines ## [109] print.document_context* ## [110] print.document_position* ## [111] print.document_range* ## [112] print.document_selection* ## [113] print.dplyr_join_by* ## [114] print.dplyr_sel_vars* ## [115] print.dummy_coef* ## [116] print.dummy_coef_list* ## [117] print.ecdf* ## [118] print.eigen ## [119] print.element* ## [120] print.factanal* ## [121] print.factor ## [122] print.family* ## [123] print.fileSnapshot* ## [124] print.findLineNumResult* ## [125] print.flatGridListing* ## [126] print.formula* ## [127] print.fseq* ## [128] print.ftable* ## [129] print.fun_list* ## [130] print.function ## [131] print.getAnywhere* ## [132] print.ggplot* ## [133] print.ggplot2_bins* ## [134] print.ggproto* ## [135] print.ggproto_method* ## [136] print.gList* ## [137] print.glm* ## [138] print.glue* ## [139] print.gpar* ## [140] print.GridCoords* ## [141] print.GridGrobCoords* ## [142] print.GridGTreeCoords* ## [143] print.grob* ## [144] print.gtable* ## [145] print.hashtab* ## [146] print.hcl_palettes* ## [147] print.hclust* ## [148] print.help_files_with_topic* ## [149] print.hexmode ## [150] print.hms* ## [151] print.HoltWinters* ## [152] print.hsearch* ## [153] print.hsearch_db* ## [154] print.htest* ## [155] print.html* ## [156] print.html_dependency* ## [157] print.htmltools.selector* ## [158] print.htmltools.selector.list* ## [159] print.infl* ## [160] print.integrate* ## [161] print.isoreg* ## [162] print.json* ## [163] print.key_missing* ## [164] print.kmeans* ## [165] print.knitr_kable* ## [166] print.last_dplyr_warnings* ## [167] print.Latex* ## [168] print.LaTeX* ## [169] print.libraryIQR ## [170] print.lifecycle_warnings* ## [171] print.listof ## [172] print.lm* ## [173] print.loadings* ## [174] print.locale* ## [175] print.loess* ## [176] print.logLik* ## [177] print.ls_str* ## [178] print.medpolish* ## [179] print.MethodsFunction* ## [180] print.mtable* ## [181] print.NativeRoutineList ## [182] print.news_db* ## [183] print.nls* ## [184] print.noquote ## [185] print.numeric_version ## [186] print.object_size* ## [187] print.octmode ## [188] print.packageDescription* ## [189] print.packageInfo ## [190] print.packageIQR* ## [191] print.packageStatus* ## [192] print.pairwise.htest* ## [193] print.path* ## [194] print.person* ## [195] print.pillar* ## [196] print.pillar_1e* ## [197] print.pillar_colonnade* ## [198] print.pillar_ornament* ## [199] print.pillar_shaft* ## [200] print.pillar_squeezed_colonnade* ## [201] print.pillar_tbl_format_setup* ## [202] print.pillar_vctr* ## [203] print.pillar_vctr_attr* ## [204] print.POSIXct ## [205] print.POSIXlt ## [206] print.power.htest* ## [207] print.ppr* ## [208] print.prcomp* ## [209] print.princomp* ## [210] print.proc_time ## [211] print.purrr_function_compose* ## [212] print.purrr_function_partial* ## [213] print.purrr_rate_backoff* ## [214] print.purrr_rate_delay* ## [215] print.quosure* ## [216] print.quosures* ## [217] print.R6* ## [218] print.R6ClassGenerator* ## [219] print.raster* ## [220] print.Rconcordance* ## [221] print.Rd* ## [222] print.recordedplot* ## [223] print.rel* ## [224] print.restart ## [225] print.RGBcolorConverter* ## [226] print.RGlyphFont* ## [227] print.rlang:::list_of_conditions* ## [228] print.rlang_box_done* ## [229] print.rlang_box_splice* ## [230] print.rlang_data_pronoun* ## [231] print.rlang_dict* ## [232] print.rlang_dyn_array* ## [233] print.rlang_envs* ## [234] print.rlang_error* ## [235] print.rlang_fake_data_pronoun* ## [236] print.rlang_lambda_function* ## [237] print.rlang_message* ## [238] print.rlang_trace* ## [239] print.rlang_warning* ## [240] print.rlang_zap* ## [241] print.rle ## [242] print.rlib_bytes* ## [243] print.rlib_error_3_0* ## [244] print.rlib_trace_3_0* ## [245] print.roman* ## [246] print.sass* ## [247] print.sass_bundle* ## [248] print.sass_layer* ## [249] print.SavedPlots* ## [250] print.scalar* ## [251] print.sessionInfo* ## [252] print.shiny.tag* ## [253] print.shiny.tag.env* ## [254] print.shiny.tag.list* ## [255] print.shiny.tag.query* ## [256] print.simple.list ## [257] print.smooth.spline* ## [258] print.socket* ## [259] print.src* ## [260] print.srcfile ## [261] print.srcref ## [262] print.stepfun* ## [263] print.stl* ## [264] print.stringr_view* ## [265] print.StructTS* ## [266] print.subdir_tests* ## [267] print.summarize_CRAN_check_status* ## [268] print.summary.aov* ## [269] print.summary.aovlist* ## [270] print.summary.ecdf* ## [271] print.summary.glm* ## [272] print.summary.lm* ## [273] print.summary.loess* ## [274] print.summary.manova* ## [275] print.summary.nls* ## [276] print.summary.packageStatus* ## [277] print.summary.ppr* ## [278] print.summary.prcomp* ## [279] print.summary.princomp* ## [280] print.summary.table ## [281] print.summary.warnings ## [282] print.summaryDefault ## [283] print.table ## [284] print.tables_aov* ## [285] print.tbl* ## [286] print.terms* ## [287] print.theme* ## [288] print.tidyverse_conflicts* ## [289] print.tidyverse_logo* ## [290] print.trans* ## [291] print.trunc_mat* ## [292] print.ts* ## [293] print.tskernel* ## [294] print.TukeyHSD* ## [295] print.tukeyline* ## [296] print.tukeysmooth* ## [297] print.undoc* ## [298] print.uneval* ## [299] print.unit* ## [300] print.vctrs_bytes* ## [301] print.vctrs_sclr* ## [302] print.vctrs_unspecified* ## [303] print.vctrs_vctr* ## [304] print.viewport* ## [305] print.vignette* ## [306] print.warnings ## [307] print.xfun_raw_string* ## [308] print.xfun_rename_seq* ## [309] print.xfun_strict_list* ## [310] print.xgettext* ## [311] print.xngettext* ## [312] print.xtabs* ## see &#39;?methods&#39; for accessing help and source code print.data.framegetAnywhere list(getAnywhere(&quot;print.data.frame&quot;), getAnywhere(&quot;print.tbl&quot;)) ## [[1]] ## A single object matching &#39;print.data.frame&#39; was found ## It was found in the following places ## package:base ## registered S3 method for print from namespace base ## namespace:base ## with value ## ## function (x, ..., digits = NULL, quote = FALSE, right = TRUE, ## row.names = TRUE, max = NULL) ## { ## n &lt;- length(row.names(x)) ## if (length(x) == 0L) { ## cat(sprintf(ngettext(n, &quot;data frame with 0 columns and %d row&quot;, ## &quot;data frame with 0 columns and %d rows&quot;), n), &quot;\\n&quot;, ## sep = &quot;&quot;) ## } ## else if (n == 0L) { ## print.default(names(x), quote = FALSE) ## cat(gettext(&quot;&lt;0 rows&gt; (or 0-length row.names)\\n&quot;)) ## } ## else { ## if (is.null(max)) ## max &lt;- getOption(&quot;max.print&quot;, 99999L) ## if (!is.finite(max)) ## stop(&quot;invalid &#39;max&#39; / getOption(\\&quot;max.print\\&quot;): &quot;, ## max) ## omit &lt;- (n0 &lt;- max%/%length(x)) &lt; n ## m &lt;- as.matrix(format.data.frame(if (omit) ## x[seq_len(n0), , drop = FALSE] ## else x, digits = digits, na.encode = FALSE)) ## if (!isTRUE(row.names)) ## dimnames(m)[[1L]] &lt;- if (isFALSE(row.names)) ## rep.int(&quot;&quot;, if (omit) ## n0 ## else n) ## else row.names ## print(m, ..., quote = quote, right = right, max = max) ## if (omit) ## cat(&quot; [ reached &#39;max&#39; / getOption(\\&quot;max.print\\&quot;) -- omitted&quot;, ## n - n0, &quot;rows ]\\n&quot;) ## } ## invisible(x) ## } ## &lt;bytecode: 0x0000022d7d813be8&gt; ## &lt;environment: namespace:base&gt; ## ## [[2]] ## A single object matching &#39;print.tbl&#39; was found ## It was found in the following places ## registered S3 method for print from namespace pillar ## namespace:pillar ## with value ## ## function (x, width = NULL, ..., n = NULL, max_extra_cols = NULL, ## max_footer_lines = NULL) ## { ## print_tbl(x, width, ..., n = n, max_extra_cols = max_extra_cols, ## max_footer_lines = max_footer_lines) ## } ## &lt;bytecode: 0x0000022d7cf180d8&gt; ## &lt;environment: namespace:pillar&gt; t.test methods(&quot;t.test&quot;) ## [1] t.test.default* t.test.formula* ## see &#39;?methods&#39; for accessing help and source code defaultnumericdefaultformula getAnywhere(&quot;t.test.formula&quot;) ## A single object matching &#39;t.test.formula&#39; was found ## It was found in the following places ## registered S3 method for t.test from namespace stats ## namespace:stats ## with value ## ## function (formula, data, subset, na.action, ...) ## { ## if (missing(formula) || (length(formula) != 3L)) ## stop(&quot;&#39;formula&#39; missing or incorrect&quot;) ## oneSampleOrPaired &lt;- FALSE ## if (length(attr(terms(formula[-2L]), &quot;term.labels&quot;)) != 1L) ## if (formula[[3L]] == 1L) ## oneSampleOrPaired &lt;- TRUE ## else stop(&quot;&#39;formula&#39; missing or incorrect&quot;) ## m &lt;- match.call(expand.dots = FALSE) ## if (is.matrix(eval(m$data, parent.frame()))) ## m$data &lt;- as.data.frame(data) ## m[[1L]] &lt;- quote(stats::model.frame) ## m$... &lt;- NULL ## mf &lt;- eval(m, parent.frame()) ## DNAME &lt;- paste(names(mf), collapse = &quot; by &quot;) ## names(mf) &lt;- NULL ## response &lt;- attr(attr(mf, &quot;terms&quot;), &quot;response&quot;) ## if (!oneSampleOrPaired) { ## g &lt;- factor(mf[[-response]]) ## if (nlevels(g) != 2L) ## stop(&quot;grouping factor must have exactly 2 levels&quot;) ## DATA &lt;- split(mf[[response]], g) ## y &lt;- t.test(x = DATA[[1L]], y = DATA[[2L]], ...) ## if (length(y$estimate) == 2L) { ## names(y$estimate) &lt;- paste(&quot;mean in group&quot;, levels(g)) ## names(y$null.value) &lt;- paste(&quot;difference in means between&quot;, ## paste(&quot;group&quot;, levels(g), collapse = &quot; and &quot;)) ## } ## } ## else { ## respVar &lt;- mf[[response]] ## if (inherits(respVar, &quot;Pair&quot;)) { ## y &lt;- t.test(x = respVar[, 1L], y = respVar[, 2L], ## paired = TRUE, ...) ## } ## else { ## y &lt;- t.test(x = respVar, ...) ## } ## } ## y$data.name &lt;- DNAME ## y ## } ## &lt;bytecode: 0x0000022d5846f8f8&gt; ## &lt;environment: namespace:stats&gt; formuladfy = t.test(x = DATA[[1L]], y = DATA[[2L]], ...)default 9.1.2  S3structure x = list; class(x) = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) y = structure(list(), class = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) list(class(x), class(y)) ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; S3UseMethod(\"\")S3S3 f = function(x) UseMethod(&quot;f&quot;) f.a = function(x) return(&quot;Class a&quot;) f.default = function(x) return(&quot;Unknown class&quot;) x = structure(list(), class = &quot;a&quot;) y = structure(list(), class = c(&quot;b&quot;, &quot;a&quot;)) z = structure(list(), class = &quot;c&quot;) list(f(x), f(y), f(z)) ## [[1]] ## [1] &quot;Class a&quot; ## ## [[2]] ## [1] &quot;Class a&quot; ## ## [[3]] ## [1] &quot;Unknown class&quot; NextMethodt.test person = structure(c(name = &quot;A&quot;), class = c(&quot;person&quot;)) employee = structure(c(name = &quot;B&quot;, job = &quot;worker&quot;), class = c(&quot;employee&quot;, &quot;person&quot;)) boss = structure(c(name = &quot;C&quot;, job = &quot;manager&quot;, status = &quot;rich&quot;), class = c(&quot;boss&quot;, &quot;employee&quot;, &quot;person&quot;)) introduce_yourself = function(person) UseMethod(&quot;introduce_yourself&quot;) introduce_yourself.person = function(person_) { cat(&quot;---\\nHi\\n&quot;) cat(&quot;My name is&quot;, person_[[&quot;name&quot;]], &quot;\\n&quot;) } introduce_yourself.employee = function(employee_) { NextMethod() cat(&quot;And I work as&quot;, employee_[[&quot;job&quot;]], &quot;\\n&quot;) } introduce_yourself.boss = function(boss_) { NextMethod() cat(&quot;I am&quot;, boss_[[&quot;status&quot;]], &quot;\\n&quot;) } introduce_yourself(person); introduce_yourself(employee); introduce_yourself(boss) ## --- ## Hi ## My name is A ## --- ## Hi ## My name is B ## And I work as worker ## --- ## Hi ## My name is C ## And I work as manager ## I am rich R 9.2 R6 R6R-tidyverse R6 S4R6newinitialize library(R6) person = R6Class( classname = &quot;anyone&quot;, public = list( name = NULL, initialize = function(name, income) { self$name = name private$income = income }, printInfo = function() { cat(&quot;---\\nHi\\n&quot;) cat(&quot;My name is&quot;, self$name, &quot;\\n&quot;) cat(&quot;I get&quot;, private$income, &quot;a month&quot;, &quot;\\n&quot;) invisible(self) } ), private = list(income = NULL) ) employee = R6Class( classname = &quot;staff&quot;, inherit = person, public = list( initialize = function(name, income, job) { super$initialize(name, income) private$job = job }, printInfo = function() { super$printInfo() cat(&quot;And I work as&quot;, private$job, &quot;\\n&quot;) } ), private = list(job = NULL) ) boss = R6Class( classname = &quot;staff&quot;, inherit = employee, public = list( initialize = function(name, income, job, status) { super$initialize(name, income, job) private$status = status }, printInfo = function() { super$printInfo() cat(&quot;I am&quot;, private$status, &quot;\\n&quot;) } ), private = list(status = NULL) ) Jack = person$new(&quot;Jack&quot;, 100) Mike = employee$new(&quot;Mike&quot;, 1000, &quot;worker&quot;) Bob = boss$new(&quot;Bob&quot;, 10000, &quot;manager&quot;, &quot;rich&quot;) Mike$printInfo() ## --- ## Hi ## My name is Mike ## I get 1000 a month ## And I work as worker Jack$printInfo() ## --- ## Hi ## My name is Jack ## I get 100 a month Bob$printInfo() ## --- ## Hi ## My name is Bob ## I get 10000 a month ## And I work as manager ## I am rich S3R6R6R6R6 9.3 S4 S4S3R6S4S4RS4showsetGeneric library(methods) setClass( Class = &quot;IcecreamMachine&quot;, slots = c( strawberry = &quot;numeric&quot;, chocolate = &quot;numeric&quot;, mango = &quot;numeric&quot; ), prototype = list( strawberry = 0, chocolate = 0, mango = 0 ) ) setMethod( f = &quot;show&quot;, signature = &quot;IcecreamMachine&quot;, definition = function(object) { cat(&quot;*** Wounderful Icecream Machine! ***\\n&quot;) cat(&quot;Taste:\\n&quot;) cat(&quot;\\tStrawberry: &quot;, object@strawberry, &quot;\\n&quot;) cat(&quot;\\tChocolate: &quot;, object@chocolate, &quot;\\n&quot;) cat(&quot;\\tMango: &quot;, object@mango, &quot;\\n&quot;) } ) setGeneric( name = &quot;getIcecream&quot;, def = function(object,...) { standardGeneric(&quot;getIcecream&quot;) } ) setMethod( f = &quot;getIcecream&quot;, signature = &quot;IcecreamMachine&quot;, definition = function(object, type) { slot(object, type) &lt;- slot(object, type) - 1 return(object) } ) setGeneric( name = &quot;setIce&lt;-&quot;, def = function(object, type, value) { standardGeneric(&quot;setIce&lt;-&quot;) } ) setReplaceMethod( f = &quot;setIce&quot;, signature = &quot;IcecreamMachine&quot;, definition = function(object, type, value) { slot(object, type) &lt;- value return(object) } ) setMethod( f = &quot;[&quot;, signature = &quot;IcecreamMachine&quot;, definition = function(x,i,j,drop) { slot(x, i) } ) setReplaceMethod( f = &quot;[&quot;, signature = &quot;IcecreamMachine&quot;, definition = function(x,i,j,value) { slot(x, i) = value validObject(x) return(x) } ) setMethod( f = &quot;initialize&quot;, signature = &quot;IcecreamMachine&quot;, definition = function(.Object, strawberry, chocolate, mango) { cat(&quot;Welcome to an icecream world!\\n&quot;) .Object@strawberry &lt;- strawberry .Object@chocolate &lt;- chocolate .Object@mango &lt;- mango return(.Object) } ) showMethods(classes = &quot;IcecreamMachine&quot;) getMethod(&quot;getIcecream&quot;, &quot;IcecreamMachine&quot;) first_machine = new(&quot;IcecreamMachine&quot;, 5, 3, 7) "],["rmarkdown.html", "10 Rmarkdown 10.1 Rmarkdown 10.2  10.3  10.4  10.5 ", " 10 Rmarkdown markdownhtmlmarkdowntyporaTypedownRmarkdownmarkdownmarkdownTexRmarkdownmarkdownhtmltexRPythonRmarkdownBookdownBlogdownPkgdownhtml 10.1 Rmarkdown 10.1: RmarkdownYaml RmarkdownYamlYaml 10.2  RmarkdownYamlbibliographybibbibtexbib 10.2: bib {anderson_macrophage-based_2021ID@ID1[@anderson_macrophage-based_2021]1footnote endnotezoterobib 10.3:  10.3  yamlbiblio-styleyamlcsl zotero 10.4: source source 10.4  10.4.1  devtools::install_github(\"crsh/citr\")citrInsert Citationshinybib 10.5: source RstudioCtrl Shift V 10.4.2  [@anderson_macrophage-based_2021; @liu_s100a4_2021]1,2 10.4.3  markdowndocxpandochtmlhtmlxpdfTexmarkdown htmlxhtmlpandoctexTextexpandocpandoc 10.5  References 1. Anderson, N. R., Minutolo, N. G., Gill, S. &amp; Klichinsky, M. Macrophage-Based Approaches for Cancer Immunotherapy. Cancer Research 81, 12011208 (2021). 2. Liu, S. et al. S100A4 enhances protumor macrophage polarization by control of PPAR--dependent induction of fatty acid oxidation. Journal For Immunotherapy of Cancer 9, (2021). "],["puzzle1.html", "11 puzzle1 11.1  11.2 ", " 11 puzzle1 11.1  Cattle = fread( &quot; id group dfactor cattle infect 1 1 1 11 8 2 1 2 10 7 3 1 3 12 5 4 1 4 11 3 5 1 5 12 2 6 2 1 10 10 7 2 2 10 9 8 2 3 12 8 9 2 4 11 6 10 2 5 10 4 &quot; ) infect_ = Cattle$infect cattle_ = Cattle$cattle Cattle_expanded = copy(Cattle)[rep(id, cattle), ] Cattle_expanded[, infect := unlist(map2(infect_, cattle_ - infect_, ~ rep(c(1, 0), c(.x, .y))))] Cattle_expanded ## id group dfactor cattle infect ## 1: 1 1 1 11 1 ## 2: 1 1 1 11 1 ## 3: 1 1 1 11 1 ## 4: 1 1 1 11 1 ## 5: 1 1 1 11 1 ## --- ## 105: 10 2 5 10 0 ## 106: 10 2 5 10 0 ## 107: 10 2 5 10 0 ## 108: 10 2 5 10 0 ## 109: 10 2 5 10 0 Cattle %&gt;% group_by(id) %&gt;% mutate(infected = list(c(rep(1, infect), rep(0, cattle-infect)))) %&gt;% unnest() %&gt;% View() ## Warning: `cols` is now required when using `unnest()`. ##  Please use `cols = c(infected)`. Cattle %&gt;% group_nest(id) %&gt;% mutate(infected = map(data, ~ c(rep(1, .x$infect), rep(0, .x$cattle-.x$infect)))) %&gt;% unnest(data) %&gt;% unnest(infected) %&gt;% select(-infect) ## # A tibble: 109 × 5 ## id group dfactor cattle infected ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 1 1 11 1 ## 2 1 1 1 11 1 ## 3 1 1 1 11 1 ## 4 1 1 1 11 1 ## 5 1 1 1 11 1 ## 6 1 1 1 11 1 ## 7 1 1 1 11 1 ## 8 1 1 1 11 1 ## 9 1 1 1 11 0 ## 10 1 1 1 11 0 ## #  99 more rows 11.2  Model1 = glm(cbind(infect, cattle - infect) ~ factor(group) + dfactor, family = binomial(link = logit), data = Cattle) summary(Model1) ## ## Call: ## glm(formula = cbind(infect, cattle - infect) ~ factor(group) + ## dfactor, family = binomial(link = logit), data = Cattle) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.1310 0.6113 3.486 0.00049 *** ## factor(group)2 1.3059 0.4654 2.806 0.00502 ** ## dfactor -0.7874 0.1813 -4.342 1.41e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 33.5256 on 9 degrees of freedom ## Residual deviance: 2.4508 on 7 degrees of freedom ## AIC: 32.254 ## ## Number of Fisher Scoring iterations: 4 Model2 = glm(infect ~ factor(group) + dfactor, family = binomial(link = logit), data = Cattle_expanded) summary(Model2) ## ## Call: ## glm(formula = infect ~ factor(group) + dfactor, family = binomial(link = logit), ## data = Cattle_expanded) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.1310 0.6113 3.486 0.00049 *** ## factor(group)2 1.3059 0.4654 2.806 0.00502 ** ## dfactor -0.7874 0.1813 -4.342 1.41e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 149.04 on 108 degrees of freedom ## Residual deviance: 117.96 on 106 degrees of freedom ## AIC: 123.96 ## ## Number of Fisher Scoring iterations: 4 "],["puzzle2.html", "12 puzzle2 12.1  12.2 ", " 12 puzzle2 12.1  rrnorm1001 x = 1 samples = rnorm(n = 10000, mean = x, sd = 1) 000 \\[ H_0: \\mu = 0 \\\\ H_1: \\mu &gt; 0 \\] \\(\\alpha = 0.05\\) \\(H_0\\) (power)\\(H_0\\) 12.1.1  H0 \\(\\bar{\\mu}\\)0\\(\\bar{\\sigma}^2\\)1\\(\\hat{\\mu}\\) \\[ \\hat{\\mu} \\sim N(\\bar{\\mu}, \\bar{\\sigma}^2/n) \\] ggplot(tibble(x = c(-1.2, 1.2)), aes(x = x)) + stat_function(fun = dnorm, args = list(mean = 0, sd = 1/10), color = &quot;firebrick&quot;) + labs(title = &quot;&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) \\(\\alpha = 0.05\\)0.95qnorm0.951.6448536\\(\\hat{\\mu}\\)&gt;\\(1.644 \\times \\bar{\\sigma}/\\sqrt{n}\\)\\(H_0\\) 0.99866610.01644 ggplot(tibble(x = c(-1.2, 1.2)), aes(x = x)) + stat_function(fun = dnorm, args = list(mean = 0, sd = 1/10), color = &quot;firebrick&quot;) + geom_vline(xintercept = mean(samples), linetype = 5, color = &quot;navy&quot;) + geom_vline(xintercept = qnorm(0.95) * 1/10, linetype = 5) + labs(title = &quot;&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) 10.3:  \\(\\alpha = 0.05\\)\\(H_0\\)  1/10\\(\\alpha = 0.05\\)0.1644854 ggplot(tibble(x = c(0, 2)), aes(x = x)) + stat_function(fun = dnorm, args = list(mean = mean(samples), sd = 1/10), color = &quot;firebrick&quot;) + geom_vline(xintercept = mean(samples), linetype = 5, color = &quot;navy&quot;) + geom_vline(xintercept = qnorm(0.95) * 1/10, linetype = 5) + labs(title = &quot;&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) 10.4:  \\(\\beta = 5.6e-18\\)1  ggplot(tibble(x = c(-1.2, 2)), aes(x = x)) + stat_function(fun = dnorm, args = list(mean = 0, sd = 1/10), color = &quot;#CD853F&quot;) + stat_function(fun = dnorm, args = list(mean = mean(samples), sd = 1/10), color = &quot;firebrick&quot;) + geom_vline(xintercept = mean(samples), linetype = 5, color = &quot;navy&quot;) + geom_vline(xintercept = qnorm(0.95) * 1/10, linetype = 5) + labs(title = &quot;&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) 12.2  0 \\[ H_0: \\mu = 0 \\\\ H_1: \\mu \\neq 0 \\] \\(\\alpha = 0.05\\) \\(H_0\\) (power)\\(H_0\\) \\(\\alpha = 0.1\\)50% 1. Anderson, N. R., Minutolo, N. G., Gill, S. &amp; Klichinsky, M. Macrophage-Based Approaches for Cancer Immunotherapy. Cancer Research 81, 12011208 (2021). 2. Liu, S. et al. S100A4 enhances protumor macrophage polarization by control of PPAR--dependent induction of fatty acid oxidation. Journal For Immunotherapy of Cancer 9, (2021). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
